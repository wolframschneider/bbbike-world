#!/bin/bash
# Copyright (c) 2012-2022 Wolfram Schneider, https://bbbike.org
#
# osm2osmand  - convert a .pbf file to osmand .obf
#

set -e
set -o pipefail # bash only

PATH="/usr/local/bin:/bin:/usr/bin"; export PATH

: ${BBBIKE_EXTRACT_LANG="en"}
: ${BBBIKE_OPT_DIR="/var/lib/bbbike/opt"}
: ${BBBIKE_SPLITTER_VERSION="splitter"}
: ${BBBIKE_EXTRACT_OSMAND_VERSION="OsmAndMapCreator"}
: ${osmand_home="$BBBIKE_OPT_DIR/$BBBIKE_EXTRACT_OSMAND_VERSION"}
: ${MD5=`which md5 md5sum false 2>/dev/null | head -1`}
: ${SHA="shasum -a 256"}
: ${BBBIKE_TMPDIR="/bbbike/tmp"}
: ${BBBIKE_TMPFS="/tmp"}
: ${logfile_max_size="3000k"}
: ${java_heap="3G"}

export BBBIKE_EXTRACT_OSMAND_VERSION

osmand_version=$( (cd $osmand_home && basename $(/bin/pwd)) )
dirname=$(dirname $0)
status=0

usage () {
   echo "$@"
   echo "usage file.pbf"
   exit 1
}

error () {
    echo "Failed to convert file: $file"
    tail -c 256K $logfile
    rm -rf $tmpdir
    exit 1
}

warn () {
    echo "Failed to convert file: $file"
    tail -c 256K $logfile
}

file=$1
city="$2"
test -e "$file" || usage "file $file does not exists"
: ${osm_checksum=$dirname/osm-checksum}


template=$dirname/../etc/extract/$(basename $0 -simple).$BBBIKE_EXTRACT_LANG.sh
case $template in /*) ;; *) template=$(pwd)/$template ;; esac

: ${debug=false}
pwd=$(pwd)

# city in portable ASCII, to store in a file name
city_ascii=$(perl -e 'use Text::Unidecode; $a = shift; $a = substr(unidecode($a),0, 30); $a =~ s,\W+,_,g; print "$a"' "$city")

test -z "$file" && usage
size=$(du -ks -L "$file" | awk '{ print $1}')

if [  $size -gt 1000000 ]; then
   java_heap="24G"
elif [ $size -gt 500000 ]; then
   java_heap="20G"
elif [ $size -gt 250000 ]; then
   java_heap="16G"
elif [ $size -gt 100000 ]; then
   java_heap="8G"
elif [ $size -gt  50000 ]; then
   java_heap="6G"
fi

java_opt=-Xmx${java_heap}

# use RAM disk
tmpdir=`mktemp -d ${BBBIKE_TMPFS}/osm2osmand.XXXXXXXXXXX`

# cleanup after signal, but show errors first
trap '( sleep 1; rm -rf $tmpdir ) &' 1 2 15

obf=`basename $file | perl -npe 's/\.(pbf|osm\.pbf|osm|osm\.gz|osm\.bz2)$//'`
obf_dir=$tmpdir/${obf}-obf
mkdir -p $obf_dir

etc_dir=$dirname/../etc/OsmAndMapCreator

# absolute path
case $etc_dir in /* ) ;; *) etc_dir=$pwd/$etc_dir ;; esac
case $file in /* ) ;; *) file=$pwd/$file ;; esac

text2html=$dirname/text2html.sh
case $text2html in /*) ;; *) text2html=$(pwd)/$text2html ;; esac

logfile=$obf_dir/logfile.txt

#mkdir $obf_dir/data $obf_dir/data/osm $obf_dir/data/indexes

cd $obf_dir
counter=0

class_path="$osmand_home/OsmAndMapCreator.jar:$osmand_home/lib/OsmAnd-core.jar:$osmand_home/lib/*.jar"
echo "OsmAnd version: $osmand_version" >> $logfile

( 
  mkdir tmp
  cd tmp
  mkdir data
  file2=$(basename $file | perl -npe 's/\./=/')
  ln -s $file $file2
  java $java_opt -Xmn512M -Djava.util.logging.config.file=$etc_dir/osm2obf-logging.properties -cp "$class_path" net.osmand.MainUtilities generate-obf $file2 >> $logfile 2>&1 || status=1
  mv *.obf ..
  cd ..
  rm -rf tmp
)

if [ $status -ne 0 ];then
   echo "Failed to convert $file"
   tail -c 256K $logfile
   exit $status
fi

date=$(date -u)

BBBIKE_EXTRACT_COORDS=$BBBIKE_EXTRACT_COORDS BBBIKE_EXTRACT_URL=$BBBIKE_EXTRACT_URL \
  date=$date city=$city sh $template > README.txt

$text2html < README.txt > README.html

case $BBBIKE_EXTRACT_LANG in
  en ) ext2="" ;;
   * ) ext2=".${BBBIKE_EXTRACT_LANG}" ;;
esac

( $MD5 *.obf; $SHA *.obf ) > .checksum.txt; mv -f .checksum.txt CHECKSUM.txt

cd ..
zip_file=`dirname $file`/$obf.osm.obf${ext2}.zip
zip -q -r - -- $(basename $obf_dir) | \
  ( cd $pwd;
    cat > $zip_file.tmp && mv $zip_file.tmp $zip_file
    $osm_checksum $zip_file
  )

$debug || rm -rf $tmpdir

#EOF
