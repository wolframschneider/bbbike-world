#!/usr/local/bin/perl
# Copyright (c) 2009-2018 Wolfram Schneider, https://bbbike.org
#
# bbbike-db - command line tool to parse bbbike @ world city database
#

use URI;
use URI::QueryParam;
use File::Basename;
use FindBin;
use lib ( "$FindBin::RealBin/../lib", "$FindBin::RealBin/../.." );

use BBBike::WorldDB;
use Extract::Config;
use Extract::Planet;

#use Strassen::Util;

use strict;
use warnings;

use vars qw($VERSION);
$VERSION = 0.2;

use Getopt::Long;

my $debug = 0;    # 0: quiet, 1: normal, 2: verbose
binmode \*STDOUT, ":utf8";
binmode \*STDERR, ":utf8";

sub osm_round {
    my $real    = shift;
    my $number  = shift || 100_000;
    my $padding = 1;

    # how many digits after the '.'
    my $counter = 0;
    for ( my $i = $number ; $i > 1 ; $i = $i / 10 ) {
        $counter++;
    }

    my $round = int( $real * $number + ( $real > 0 ? 0.5 : -0.5 ) ) / $number;

    if ($padding) {
        my $digits = $round;
        $digits =~ s/^\d*\.?//;

        warn "Real: $real, number: $number, Digits: $digits\n" if $debug >= 2;

        # no digits at all
        $round .= '.' if !$digits;

        for ( my $i = length($digits) ; $i < $counter ; $i++ ) {
            $round .= '0';
        }
    }

    warn "$real <-> $round ", $real - $round, "\n"
      if $debug >= 2 && $real != $round;

    return $round;
}

sub extract_url {
    my ( $city, $x1, $y1, $x2, $y2 ) = @_;
    my $dev_server = $ENV{'BBBIKE_DEV_SERVER'} || 'https://dev1.bbbike.org';

    my $uri = URI->new("$dev_server/cgi/extract.cgi");

    $uri->query_form(
        "lang"   => "en",
        "sw_lng" => $x1,
        "sw_lat" => $y1,
        "ne_lng" => $x2,
        "ne_lat" => $y2,
        "format" => "osm.pbf",
        "email"  => "nobody",
        "as"     => "0.1073349609375",
        "city"   => $city,
        "submit" => "extract"            #&expire=1473945448
    );

    return $uri->as_string . "\n";
}

sub poly {
    my ( $city, $x1, $y1, $x2, $y2 ) = @_;
    my $data = "";

    $data .= "$city\n";
    $data .= "1\n";

    $data .= "   $x1  $y1\n";
    $data .= "   $x2  $y1\n";
    $data .= "   $x2  $y2\n";
    $data .= "   $x1  $y2\n";

    $data .= "END\n";
    $data .= "END\n";

    return $data;
}

sub distance {
    my $a = shift;
    my $b = shift;

    require Strassen::Util;

    my ( $x1, $y1, @rest )  = split( $", $a );
    my ( $x2, $y2, @rest2 ) = split( $", $b );

    my $distance = Strassen::Util::strecke_polar( [ $x1, $y1 ], [ $x2, $y2 ] );
    return int( $distance / 1_000 );
}

sub city_length {
    my $coord = shift;
    require Strassen::Util;

    my ( $x1, $y1, $x2, $y2 ) = split( /\s+/, $coord );

    my $distance = Strassen::Util::strecke_polar( [ $x1, $y1 ], [ $x2, $y2 ] );
    return int( $distance / 1_00 ) / 10;
}

sub other_names {
    my %args = @_;

    my $db   = $args{'db'};
    my $city = $args{'city'};

    return $db->{_city}->{$city}->{"other_names"};
}

sub neighbours {
    my %args = @_;

    require Data::Dumper;

    my $db   = $args{'db'};
    my $city = $args{'city'};

    my @list;

    my $coord = $db->{"_city"}->{$city}->{'coord'};
    foreach my $c ( $db->list_cities ) {
        push(
            @list,
            [
                &distance( $coord, $db->{"_city"}->{$c}->{'coord'} ), $c,
                $db->{"_city"}->{$c}->{'name'}
            ]
        );
    }

    @list = sort { $a->[0] <=> $b->[0] } @list;
    while ( scalar(@list) > 32 ) {
        pop @list;
    }
    local ($Data::Dumper::Indent);
    $Data::Dumper::Indent = 0;
    my $data = Data::Dumper::Dumper( \@list );

    $data =~ s/^\S+\s*=\s*//;
    $data =~ s/;//;

    return $data;
}

sub sub_planet {
    my $hash = shift;
    my $city = shift;

    my $planet     = new Extract::Planet( 'debug' => $debug );
    my $planet_osm = $Extract::Config::planet_osm->{'planet.osm'};
    my %hash       = %$hash;

    my ( $sw_lng, $sw_lat, $ne_lng, $ne_lat ) =
      map { &osm_round( $_, 100 ) } split( /\s+/, $hash{$city}->{coord} );

    my $obj = {
        "format" => "pbf",
        "sw_lng" => $sw_lng,
        "sw_lat" => $sw_lat,
        "ne_lng" => $ne_lng,
        "ne_lat" => $ne_lat
    };

    my $sub_planet = $planet->get_smallest_planet_file(
        'expire'     => -1,
        'obj'        => $obj,
        'planet_osm' => $planet_osm
    );

    return $sub_planet;
}

#sub distance {
#    my $coord = shift;
#
#    my @data = split( /\s+/, $coord );
#
#    my $point  = GPS::Point->new( 'lat' => $data[0], 'lon' => $data[1] );
#    my $point2 = GPS::Point->new( 'lat' => $data[2], 'lon' => $data[3] );
#
#    my $distance = $point->distance($point2);
#
#    # in 9.2 km format
#    return int( $distance / 100 ) / 10;
#}

sub usage () {
    <<EOF;
usage: $0 [--debug={0..2}] [options] city

--debug=0..2	  debug option
--lang
--local-lang
--population
--neighbours
--coord
--poly
--extract-url
--centerdelta
--area=area
--city-names
--city-stat
--startc
--step
--list
--list-by-area
--city-database=/path/to/etc/cities.csv
--other_names
--robots-local-lang cities .....
--planet
--help
EOF
}

my $help;
my $lang;
my $local_lang;
my $robots_local_lang;
my $step;
my $population;
my $coord;
my $poly;
my $extract_url;
my $centerdelta;
my $area;
my $city_en;
my $list;
my $list_by_area;
my $city_names;
my $city_database;
my $neighbours;
my $other_names;
my $city_stat;
my $region;
my $startc;
my $planet;

# ignore dummy entries in cities.csv (name=dummy or step=dummy)
my $ignore_dummy = 1;

GetOptions(
    "debug=i"           => \$debug,
    "lang"              => \$lang,
    "help"              => \$help,
    "local-lang"        => \$local_lang,
    "robots-local-lang" => \$robots_local_lang,
    "step"              => \$step,
    "city-names"        => \$city_names,
    "population"        => \$population,
    "neighbours"        => \$neighbours,
    "other-names"       => \$other_names,
    "region"            => \$region,
    "coord"             => \$coord,
    "startc"            => \$startc,
    "poly"              => \$poly,
    "extract-url"       => \$extract_url,
    "centerdelta"       => \$centerdelta,
    "area=s"            => \$area,
    "city-en"           => \$city_en,
    "city-stat"         => \$city_stat,
    "list"              => \$list,
    "planet"            => \$planet,
    "list-by-area"      => \$list_by_area,
    "city-database=s"   => \$city_database,
) or die usage;

if ($help) {
    print &usage;
    exit;
}

my $city = shift;
die &usage
  if !( $city || $area || $city_en || $list || $list_by_area || $city_stat );

$city =~ s/-(convert|download)$// if $city;

my $database =
  $city_database ? $city_database : "$FindBin::RealBin/../etc/cities.csv";

my %hash;

my $db = BBBike::WorldDB->new( 'database' => $database, 'debug' => 0 );
%hash = %{ $db->city };

if ( defined $area ) {
    while ( my ( $key, $val ) = each %hash ) {
        next if $ignore_dummy && $hash{$key}->{"dummy"};

        print $key, "\n" if $hash{$key}->{"area"} eq $area;
    }
    exit 0;
}

if ( defined $city_stat ) {
    foreach my $city ( $db->list_cities ) {
        print "$city =>\t";
        print &city_length( $db->city->{$city}->{"coord"} ) . "\t";

        my %hash;
        foreach my $l (qw/de en da es fr hr nl pl pt ru zh/) {
            my $c = $db->city->{$city};

            my $name =
              $db->select_city_name( $c->{"city"}, $c->{"name"} || $city, $l );
            if ( exists $hash{$name} ) {
                $hash{$name} .= "," . $l;
            }
            else {
                $hash{$name} = $l;
            }
        }
        foreach my $name ( $db->list_cities ) {
            print "$name:" . $hash{$name} . " ";
        }
        print "\n";

    }
    exit;
}

if ($robots_local_lang) {
    my @cities = ( $city, @ARGV );

    foreach $city (@cities) {
        my $l = $hash{$city}->{local_lang} ? $hash{$city}->{local_lang} : "en";

        if ( $l eq 'en' ) {
            print "Disallow: /en/$city/\n";
        }
        else {
            print "Disallow: /en/$city/?\n";
        }
    }

    exit;
}

# sort cities by sub-planet
if ($list_by_area) {
    my %sub_planet;
    foreach my $city ( $db->list_cities ) {
        my $sub_planet = &sub_planet( \%hash, $city );

        warn "city: $city, sub-planet: $sub_planet\n" if $debug >= 1;
        $sub_planet{$city} = $sub_planet;
    }

    foreach
      my $city ( sort { $sub_planet{$a} cmp $sub_planet{$b} } keys %sub_planet )
    {
        print "$city\n";
    }

    exit 0;
}

if ( $list || $city_en ) {
    foreach my $key ( $db->list_cities ) {
        my $val = $hash{$key};
        my $local_lang = $hash{$key}->{local_lang} eq 'de' ? 'de' : "en";
        print $key, "\n"
          if $list
          || $local_lang eq 'en';
    }
    exit 0;
}

if ( exists $hash{$city} ) {
    if ($lang) {
        print $hash{$city}->{lang} ? $hash{$city}->{lang} : "en";
        print " ";
    }
    elsif ($local_lang) {
        print $hash{$city}->{local_lang} ? $hash{$city}->{local_lang} : "en";
        print " ";
    }
    elsif ($planet) {
        my $osm_dir = $ENV{OSM_DIR} || "./osm";
        my $sub_planet = sub_planet( \%hash, $city );
        print
"osmconvert-wrapper -o $osm_dir/$city/$city.osm.pbf -B=$osm_dir/$city/$city.poly",
          " --out-pbf --drop-broken-refs --drop-author --drop-version",
          " ${sub_planet}\0";
    }
    elsif ($city_names) {
        print $hash{$city}->{name} ? $hash{$city}->{name} : $city;
    }
    elsif ($coord) {
        my ( $x1, $y1, $x2, $y2 ) =
          map { &osm_round( $_, 100 ) } split( /\s+/, $hash{$city}->{coord} );
        print "$x1 $y1 $x2 $y2 ";
    }
    elsif ($startc) {
        my ( $x1, $y1, $x2, $y2 ) =
          map { &osm_round( $_, 100 ) } split( /\s+/, $hash{$city}->{coord} );
        print "startc=$x1,$y1&zielc="
          . ( $x1 + ( $x2 - $x1 ) / 6 ) . ","
          . ( $y1 + ( $y2 - $y1 ) / 6 ) . "\n";
    }
    elsif ($poly) {
        my ( $x1, $y1, $x2, $y2 ) =
          map { &osm_round( $_, 100 ) } split( /\s+/, $hash{$city}->{coord} );
        print &poly( $city, ( $x1, $y1, $x2, $y2 ) );
    }
    elsif ($extract_url) {
        my ( $x1, $y1, $x2, $y2 ) =
          map { &osm_round( $_, 100 ) } split( /\s+/, $hash{$city}->{coord} );
        print &extract_url( $city, ( $x1, $y1, $x2, $y2 ) );
    }
    elsif ($centerdelta) {
        my ( $x1, $y1, $x2, $y2 ) =
          map { &osm_round( $_, 100 ) } split( /\s+/, $hash{$city}->{coord} );
        print "$x1,$y1 ";
    }
    elsif ($population) {
        print $hash{$city}->{population}, "\n";
    }
    elsif ($region) {
        print $hash{$city}->{"area"}, "\n";
    }
    elsif ($neighbours) {
        print &neighbours( 'city' => $city, 'db' => $db );
    }
    elsif ($other_names) {
        print &other_names( 'city' => $city, 'db' => $db );
    }
    elsif ($step) {
        print $hash{$city}->{step}, "\n";
    }

    else { warn "unknown directive\n"; die &usage; }
}
else {
    die "Unknown city: $city\n" . &usage;
}

#EOF
