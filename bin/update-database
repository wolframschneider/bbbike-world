#!/bin/sh
# Copyright (c) 2009-2021 Wolfram Schneider, https://bbbike.org
#
# wrapper for Makefile
#
# e.g. run after convert-wgs8 failure:
# bbbike_download="" bbbike_download_convert="" bbbike_extract="" /path/to/this/file

set -e

if [ -e $HOME/.bbbikerc ]; then 
    . $HOME/.bbbikerc
fi

available_disk_size ()
{
    disk=$1
    min_disk_size=$2
    available_disk_size=$(df -k $disk | tail -1 | awk '{ print int($4/1024/1024) }')
    if [ $available_disk_size -le $min_disk_size ]; then
        echo "Required disk space in $disk: $available_disk_size < $min_disk_size GB"
        echo "Sorry, give up. Please cleanup the disk, and start it again."
        echo ""
        df -h .
        echo ""
        exit 1
    fi
}
#########################################################################
# we need ca. 100GB free disk space to update bbbike
# we need ca. 220GB free disk space for a fresh installation
#
# du -hs bbbike osm/download/planet-latest*pbf osm/download/sub-planet
# 67G     bbbike
# 33G     osm/download/planet-latest-nometa.osm.pbf
# 41G     osm/download/planet-latest.osm.pbf
# 72G     osm/download/sub-planet
#

available_disk_size . 100
available_disk_size /usr/local/www/bbbike.org/ 50

tmp=tmp
mkdir -p $tmp

: ${bbbike_build="build-runtime update-files"}
: ${bbbike_download="planet-download"}
: ${bbbike_download_convert="sub-planet"}
: ${bbbike_extract="distclean-osm distclean update-files cities-parallel"}
: ${bbbike_convert="convert-wgs84 convert-post check-data-osm convert-bbbike update-files"}
: ${bbbike_install="rsync-tgz _rsync cache-heater-k"}
: ${bbbike_format="pbf2osm pbf2csv pbf2geojson osm2shape osm2garmin osm2mapsforge osm2svg"}
: ${bbbike_post="osm-html rsync rsync-osm-full"}
: ${bbbike_post2=""}

commands="$bbbike_build $bbbike_download $bbbike_download_convert $bbbike_extract $bbbike_convert $bbbike_install $bbbike_format $bbbike_post $bbbike_post2"

# lower I/O nice level on linux
if which ionice >/dev/null 2>&1; then
   ionice=ionice
   ionice_opt="-c 2 -n 6"
fi

begin="$(date '+%F %T %Z')"

for i in $commands
do
    # compress old log files
    if [ -e tmp/log.$i ]; then
         gzip -f tmp/log.$i
    fi

    case $i in
        # in background
        rsync-osm | rsync-bg ) time $ionice $ionice_opt make -s $i > tmp/log.$i 2>&1 & ;;
    
            # foreground
            * )         ( date; time $ionice $ionice_opt make -s $i; date ) > tmp/log.$i 2>&1 ;;
	esac
done
wait

# set an notice
(  
   echo "hostname: $(hostname), IP: $(egrep $(hostname) /etc/hosts)"
   echo "begin: $begin"
   echo "end:   $(date '+%F %T %Z')" 
) | mail -s "$0/done" $(whoami)

