#!/usr/local/bin/perl
# Copyright (c) 2009-2013 Wolfram Schneider, https://bbbike.org
#
# planet-ext-streetnames - extract street names from an OpenStreetMap
#	XML dump. The output format is:
#
#		streetname <tab> lon,lat
#
# you can use this script to build an OpenSearch suggestion database
#

use XML::LibXML::Reader;
use IO::File;
use File::Temp;
use Data::Dumper;
use Getopt::Long;

#use Search::Dict;

use strict;
use warnings;

use vars qw($VERSION);
$VERSION = 0.2;

# unicode sort(1) mess
$ENV{'LANG'} = 'C';

my $debug  = 1;    # 0: quiet, 1: normal, 2: verbose
my $sort   = 0;
my $uniq   = 1;
my $unlink = 1;
my $help;
my $area_lookup;

my $xmlparser;

sub usage () {
    <<EOF;
usage: $0 [ options ] osm_files ....

--debug=0..2	  debug option, default: $debug
--sort=0|1	  sort street names, default: $sort
--uniq=0|1	  filter street names, default: $uniq
--unlink=0|1	  remove temporary databases, default: $unlink
--area-lookup	  lookup database for areas
osmfile ...       Files downloaded by downloadosm,
                  or directory containing .osm files
EOF
}

sub extract_nodes {
    my $reader     = shift;
    my $fd_nodes   = shift;
    my $fd_streets = shift;

    my $flag              = 0;
    my $parse_street_flag = 0;

    while ( $flag || $reader->nextElement == 1 ) {
        $flag = 0;
        last if !$reader->name;

        if ( $reader->name eq 'node' ) {
            my $id  = $reader->getAttribute('id');
            my $lat = $reader->getAttribute('lat');
            my $lon = $reader->getAttribute('lon');

            print $fd_nodes $id, "\t", $lon, ",", $lat, "\n";

        }

        elsif ( $reader->name eq 'way' ) {
            warn "Parse streets ...\n" if $debug >= 2 && !$parse_street_flag;
            $parse_street_flag++;

            my %tag;
            my @nodes;
            my $zip_code;

            while ( $reader->nextElement == 1 ) {

                my $node_name = $reader->name;
                if ( $node_name eq 'nd' ) {
                    push @nodes, $reader->getAttribute('ref');
                }
                elsif ( $node_name eq 'tag' ) {
                    $tag{ $reader->getAttribute('k') } =
                      $reader->getAttribute('v');
                }
                else {
                    last;
                }
            }

            if ( $tag{'highway'} ) {
                my $name = $tag{'name'} || '';
                $name .= ' [ZIP ' . $tag{'postal_code'} . ']'
                  if exists $tag{'postal_code'} && $name;

                $name =~ s/^\s+//;
                $name =~ s/\s+$//;
                $name =~ s/\t/ /g;
                $name =~ s/  +/ /g;
                $name =~ s/^\s*$//;

                if ( $name && exists $nodes[0] && $nodes[0] ) {
                    print $fd_streets $nodes[0], "\t", $name, "\n";
                }
            }

            # we are already at the next element
            $flag = 1;
        }
    }
}

sub street_names {
    my %args = @_;

    my $streets = $args{'streets'};
    my $points  = $args{'points'};
    my $sort    = $args{'sort'};
    my $look_fh = $args{'area_lookup'};

    my @look_fh;
    @look_fh = @$look_fh if ref $look_fh eq 'ARRAY';

    warn "Parse streets db $streets ...\n" if $debug >= 2;
    my %hash;
    my $street_list = new IO::File $streets, "r" or die "open $streets: $!\n";
    while (<$street_list>) {
        chomp;
        my ( $point, $street ) = split(/\t/);

        next if !$street;
        next if !$point;

     # requires twice the memory, too much for the planet file (>3.8GB) and will
     # crash 4GB RAM machines
     # push( @{ $hash{$point} }, $street );

        $hash{$point} .= exists $hash{$point} ? "\t" . $street : $street;
    }
    undef $street_list;

    my $fd_sort;
    my $sort_file;
    my @sort_opt = ('-uf');

    if ( scalar @look_fh ) {
        $sort = -1;
        $uniq = -1 if $uniq;

        my $fh = File::Temp->new( UNLINK => $unlink, SUFFIX => '.sort' )
          or die "File::Temp: $!\n";
        $sort_file = $fh->filename;
        push( @sort_opt, '-k2', "--field-separator=\t", '-o', $sort_file );

        warn "Sort options: ", join( " ", @sort_opt ), "\n" if $debug >= 2;
    }

    if ($sort) {
        open $fd_sort, "|-", "sort", @sort_opt
          or die "Can't run sort: $!";
        select($fd_sort);
    }

    warn "Parse points db $points ...\n" if $debug >= 2;
    my $point_list = new IO::File $points, "r" or die "open $points: $!\n";

    my %streets;
    while (<$point_list>) {
        chomp;
        my ( $point, $coords ) = split(/\t/);

        if ( exists $hash{$point} ) {
            foreach my $street ( split( /\t/, $hash{$point} ) ) {
                next if !$street;

                next if $uniq > 0 && exists $streets{$street};

                print $street, "\t", $coords, "\n";

                $streets{$street} = 1 if $uniq;
            }
        }
    }

    undef $point_list;
    if ($sort) {
        close($fd_sort);
        select STDOUT;
    }

    # done?
    return if $sort >= 0 or scalar @look_fh == 0;

    warn "Lookup for areas ...\n" if $debug >= 2;

    my $look_counter      = 0;
    my $look_counter_hits = 0;

    open $fd_sort, "|-", "sort", "-uf"
      or die "Can't run sort: $!";
    select($fd_sort);

    my $street_db = new IO::File $sort_file, "r" or die "open $sort_file: $!\n";

    undef %streets;
    while (<$street_db>) {
        chomp;
        my ( $street, $coords ) = split(/\t/);

        $look_counter++;

        # many look(1) implementation does not support files >2GB
        # search in several look databases
        my $line;
        foreach my $fh (@look_fh) {
            if ( look( $fh, $coords ) < 0 ) {
                die "look: coords: '$coords': $!\n";
            }

            $line = <$fh>;

            last if defined $line;
        }

        if ( defined $line ) {
            $look_counter_hits++;
            chomp $line;
            my ( $gps, $area ) = split( /\t/, $line );

            if ( $gps ne $coords and $debug ) {
                warn "Look error: '$coords' <=> '$gps'\n";
            }
            else {

                $area =~ s#/#, #;
                $street .= " [$area]";
            }
        }

        next if $uniq && exists $streets{$street};

        print $street, "\t", $coords, "\n";
        $streets{$street} = 1 if $uniq;
    }

    undef $street_db;

    select STDOUT;
    warn
      "Lookup statistic: searches: $look_counter, hits: $look_counter_hits\n";
}

sub open_osm_file {
    my $osm_file = shift;
    my $fh;

    warn "Parse osm db $osm_file ...\n" if $debug >= 2;

    if ( $osm_file =~ m{\.osm\.bz2$} ) {
        open $fh, "-|", "osm_bzcat", $osm_file
          or die "Can't run bunzip2 on $osm_file: $!";
    }
    elsif ( $osm_file =~ m{\.osm\.gz$} ) {
        open $fh, "-|", "osm_zcat", $osm_file
          or die "Can't run gzip on $osm_file: $!";
    }
    elsif ( $osm_file =~ m{\.osm\.pbf$} ) {
        open $fh, "-|", "pbf2osm", $osm_file
          or die "Can't run pbf2osm on $osm_file: $!";
    }
    elsif ( $osm_file =~ m{\.osm$} ) {
        open $fh, $osm_file
          or die "Can't open $osm_file: $!";
    }
    elsif ( $osm_file eq '-' ) {
        $fh = \*STDIN;
    }
    else {
        warn "Unknown file extenstion: $osm_file\n";
        warn "Expect *.osm.gz, *.osm.bz2, *.osm, *.pbf or '-'\n";
        exit(1);
    }

    binmode( $fh, ":utf8" );

    my $reader = XML::LibXML::Reader->new( IO => $fh );

    #my $reader = XML::LibXML::Reader->new( location => $osm_file );

    # check if osm file
    $reader->nextElement;
    if ( $reader->name ne 'osm' ) {
        die
"The file '$osm_file' is not starting with a <osm> tag, probably not an osm file?";
    }

    return $reader;
}

######################################################################
#
# main
#

GetOptions(
    "help"          => \$help,
    "debug=i"       => \$debug,
    "sort=i"        => \$sort,
    "unlink=i"      => \$unlink,
    "uniq=i"        => \$uniq,
    "area_lookup=s" => \$area_lookup,
) or die usage;

my @osm_files = @ARGV;
die &usage if $help or !@osm_files;

my @look_fh;
if ($area_lookup) {

    # many look(1) implementation does not support files >2GB
    foreach my $file ( split( /:/, $area_lookup ) ) {
        my $look_fh = IO::File->new($file) or die "open $file: $!\n";
        warn "Open look db $file\n" if $debug >= 2;
        push( @look_fh, $look_fh );
    }
}

for my $osm_file (@osm_files) {
    my $reader = open_osm_file($osm_file);

    my $fd_nodes = File::Temp->new( UNLINK => $unlink, SUFFIX => '.nodes' )
      or die "File::Temp: $!\n";
    my $fd_streets = File::Temp->new( UNLINK => $unlink, SUFFIX => '.streets' )
      or die "File::Temp: $!\n";
    binmode( $fd_nodes,   ":utf8" );
    binmode( $fd_streets, ":utf8" );

    extract_nodes( $reader, $fd_nodes, $fd_streets );

    &street_names(
        'streets'     => $fd_streets->filename,
        'points'      => $fd_nodes->filename,
        'sort'        => $sort,
        'area_lookup' => \@look_fh,
    );

    if ( !$unlink ) {
        warn "Nodes:   ", $fd_nodes->filename,   "\n";
        warn "Streets: ", $fd_streets->filename, "\n";
    }
}

#EOF
