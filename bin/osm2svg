#!/bin/sh
# Copyright (c) 2012-2023 Wolfram Schneider, https://bbbike.org
#
# osm2svg - convert a osm/pbf file to svg/png
#

set -e
PATH=/usr/local/bin:/bin:/bin:/usr/bin; export PATH

: ${BBBIKE_OPT_DIR="/var/lib/bbbike/opt"}
: ${BBBIKE_TMPDIR="/bbbike/tmp"}
: ${BBBIKE_TMPFS="/tmpfs"}
: ${BBBIKE_EXTRACT_LANG="en"}

: ${BBBIKE_MAPERITIVE_VERSION="Maperitive"}
: ${BBBIKE_MAPERITIVE_ZOOM="15"}
: ${BBBIKE_MAPERITIVE_SCALE="1"}
: ${BBBIKE_MAPERITIVE_MAPSTYLE="osm"}
: ${BBBIKE_MAPERITIVE_DISPLAY=":200"}
: ${logfile_max_size="3000k"}

: ${debug=false}

#: ${BBBIKE_MAPERITIVE_WIDTH="1200"}
#: ${BBBIKE_MAPERITIVE_HEIGHT="900"}
: ${MD5=`which md5 md5sum false 2>/dev/null | head -1`}
: ${osm_checksum=$(dirname $0)/osm-checksum}

pwd=$(pwd)
maperitive_version=$(ls -ld /var/lib/bbbike/opt/Maperitive | awk '{ print $NF }')

usage () {
   echo "$@"
   echo "usage file [ osm | google | hiking | wireframe | urbanight | cadastre ]" # [ title ]
   exit 1
}

error () {
    message="$@"

    echo "$message"
    echo "file: $file"
    if [ -e $logfile ]; then
        tail -c 256K $logfile
    fi
    exit 1
}

case $(basename $0) in
    osm2svg* ) type=svg ;;
    osm2png* ) type=png ;;
    * ) usage "unknown type $0, only png and svg supported" ;;
esac

file=$1
map_style=$2
city=$3

test -z "$file" && usage

# absolute file path
case $file in /*) ;; *) file=$pwd/$file ;; esac

text2html=$(dirname $0)/text2html.sh
case $text2html in /*) ;; *) text2html=$pwd/$text2html ;; esac

template=$(dirname $0)/../etc/extract/$(basename $0).$BBBIKE_EXTRACT_LANG.sh
case $template in /*) ;; *) template=$pwd/$template ;; esac

if [ -z "$map_style" ]; then
   map_style=$BBBIKE_MAPERITIVE_MAPSTYLE
fi

alias=""
case "$map_style" in
   osm )        alias=default ;;
   google )     alias=googlemaps ;;
   hiking )     alias=hiking ;;
   wireframe )  alias=wireframe ;;
   urbanight )  alias=urbanight ;;
   cadastre )   alias=nakaner/cadastre ;;
    * ) usage "unknown map_style: '$map_style'" ;;
esac

case $BBBIKE_EXTRACT_LANG in
  en ) ext2="" ;;
   * ) ext2=".$BBBIKE_EXTRACT_LANG" ;;
esac

size=$(du -ks -L "$file" | awk '{ print $1}')

basename=$(basename $file | perl -npe 's/\.(pbf|osm\.pbf|osm|osm\.gz|osm\.bz2)$//')
_tmpdir=$(mktemp -d ${BBBIKE_TMPFS}/osm2${type}.$map_style.XXXXXXXXXXX)
tmpdir=$_tmpdir/${basename}-${type}-${map_style}
mkdir -p $tmpdir
cd $tmpdir

# cleanup at exit
trap 'rm -rf $tmpdir $tmpfile' 0

logfile=$tmpdir/logfile.txt
touch $logfile
echo "Maperitive version: $maperitive_version" >> $logfile

config_file=config.mscript
image_file=$(basename $file | perl -npe 's/\.(pbf|osm\.pbf|osm|osm\.gz|osm\.bz2)$//')-${map_style}.${type}
zoom=$BBBIKE_MAPERITIVE_ZOOM
scale=$BBBIKE_MAPERITIVE_SCALE
program="mono --desktop  $BBBIKE_OPT_DIR/$BBBIKE_MAPERITIVE_VERSION/Maperitive.exe"


#####################################################################################
# create config file on the fly
#
etc_dir=$(dirname $0)/../etc/maperitive
# absolute path
case $etc_dir in /*) ;; *) etc_dir=$pwd/$etc_dir ;; esac

echo "clear-map" > $config_file

# local style or standard style?
case $alias in
    */* ) alias_file=$etc_dir/$alias.mrules
          if [ ! -f "$alias_file" ]; then
              usage "cannot file rule file $alias_file"
          fi

          echo "use-ruleset location=$etc_dir/$alias.mrules as-alias=$(basename $alias)" >> $config_file
          ;;
    * )   echo "use-ruleset alias=$alias" >> $config_file ;;
esac

cat >> $config_file <<EOF
apply-ruleset
load-source $file
EOF

case $type in
    svg ) export="export-svg" ;;
    png ) export="export-bitmap" ;;
esac

echo "$export zoom=$zoom file=$image_file scale=$scale" >> $config_file

date=$(date -u)
BBBIKE_EXTRACT_COORDS=$BBBIKE_EXTRACT_COORDS BBBIKE_EXTRACT_URL=$BBBIKE_EXTRACT_URL \
  date=$date city=$city maperitive_map_style=$map_style sh $template > $tmpdir/README.txt

$text2html < README.txt > README.html

#####################################################################################
# main
#
echo ">>> Run Maperitive, map style: $map_style" >> $logfile
if ! DISPLAY=$BBBIKE_MAPERITIVE_DISPLAY time $program  -exitafter $(pwd)/$config_file >> $logfile 2>&1; then
  tail -n 20 $logfile
  exit 2
fi

if test -n "$(find $logfile -size +$logfile_max_size -print)"; then
    echo "logfile $logfile is to big: $(ls -l $logfile)"
    exit 2
fi

$MD5 $image_file > .checksum.txt.tmp
mv -f .checksum.txt.tmp CHECKSUM.txt

# local style
if [ -n "$alias_file" -a -f "$alias_file" ]; then
    cp $alias_file .
# standard style
else
    rules_config=$(ls $BBBIKE_OPT_DIR/$BBBIKE_MAPERITIVE_VERSION/Rules | egrep -i "^$alias.mrules$")
    cp $BBBIKE_OPT_DIR/$BBBIKE_MAPERITIVE_VERSION/Rules/$rules_config .
fi

# PNG
if [ -e $image_file.georef ] ;then
    mv $image_file.georef georef.xml
fi

cd ..

# zip file in same directory as the PBF file
tarball_zip=$(dirname $file)/${basename}.osm.${type}-${map_style}${ext2}.zip
zip -q -r - -- $(basename $tmpdir) | \
  ( cd $pwd;
    cat > $tarball_zip.$$ && mv $tarball_zip.$$ $tarball_zip
    $osm_checksum $tarball_zip
  )

# cleanup except in debug mode
if ! $debug; then
    rm -rf $_tmpdir
fi

# EOF
