###############################################################
# Copyright (c) 2008-2011 Wolfram Schneider, https://bbbike.org
#
# Get and convert OpenStreetMap.org data to BBBike
#
# For more information about BBBike, visit https://www.bbbike.org
#

BBMAKE=	${MAKE} -f world/Makefile.osm
MAX_PARALLELS_OSM_DOWNLOADS=	2
NICE=		nice -n 10
NICE5=		nice -n 9
PERL=		perl
GIT_ID=		$(shell git show | head -n1 | awk '{ print $$2 }')
TMP_DIR=	/tmp/bbbike-$(shell whoami)
LOGNAME=         $(shell logname 2>/dev/null || whoami)
OSM2BBD_MAPTYPE=	#-map bbbike	
OSM_SOCKS_PROXY=	--socksproxy=socks://localhost:1080
OSM_TIMEOUT=	--timeout=45
DOWNLOADOSM_URL=	--osm-api-url=http://www.informationfreeway.org/api/0.6
DOWNLOADOSM=	${PERL} ./miscsrc/downloadosm --debug=1 ${OSM_SOCKS_PROXY} ${OSM_TIMEOUT} ${DOWNLOADOSM_URL}
#OSM2BBD=	${PERL} ./miscsrc/osm2bbd --nodate -f --debug=0 ${OSM2BBD_MAPTYPE} -ignore-unhandled -ignore-underline -experiment add_postal_code #-experiment polar_coord_hack
OSM2BBD_OPT=	--ignore-unhandled --ignore-underline-noname --granularity=100
OSM2BBD=	./miscsrc/osm2bbd ${OSM2BBD_OPT} --nodate --no-create --git-id="${GIT_ID}" -f --debug=0 ${OSM2BBD_MAPTYPE} -experiment add_postal_code -experiment handle_relations

DOCKER_SUDO?= 			$(shell if test `uname` = "Linux"; then echo "sudo"; fi)
DOCKER_IMAGE_FILE?=		bbbike-debian9
DOCKER_BBBIKE_TAG?=		bbbike/extract-debian9
DOCKER= 			${DOCKER_SUDO} docker

MAX_CPU=	`world/bin/ncpu`
MAX_CPU2=	`world/bin/ncpu -1`
MAX_CPU3=	`world/bin/ncpu / 2`
MAX_VCPU=	`world/bin/ncpu vcpu`
MAX_RCPU=	`world/bin/ncpu rcpu -1`
MAX_HCPU=	`world/bin/ncpu hcpu`
MAX_OSM2PBF=	1
MAX_OSM2SHAPE=	${MAX_CPU}
MAX_OSM2NAVIT=	${MAX_CPU}
MAX_PBF2OSM=	${MAX_CPU}
MAX_PBF2OPL=	$$(( ${MAX_CPU} * 2 / 3 + 1 ))
#MAX_OSM2OSMAND=	${MAX_HCPU}
MAX_OSM2OSMAND=	$$(( ${MAX_CPU} * 3 / 5 + 1 ))
MAX_OSM2GARMIN=	$$(( ${MAX_CPU} / 4 + 1 ))
MAX_OSM2PNG=	${MAX_CPU2}
MAX_OSM2SVG=	${MAX_CPU}
MAX_OSM2MAPSFORGE= $$(( ${MAX_CPU} / 3 + 1 ))
MAX_OSM2MAPSME=	${MAX_CPU2}
MAX_CPU_20=	$$(( ${MAX_CPU} * 2 / 10 + 1 ))
MAX_CPU_30=	$$(( ${MAX_CPU} * 3 / 10 + 1 ))
MAX_CPU_40=	$$(( ${MAX_CPU} * 4 / 10 + 1 ))
MAX_CPU_50=	$$(( ${MAX_CPU} * 5 / 10 + 1 ))
MAX_CPU_80=	$$(( ${MAX_CPU} * 8 / 10 + 1 ))

CURL_USER_AGENT=	-A "BBBike.org-CacheHeater/1.0"

XARGS=		${NICE} `which gxargs xargs | head -1`
XARGS5=		`which gxargs xargs | head -1`
TIME=		time
OSM2PBF=	world/bin/osm2pbf

PBF2OSM=	world/bin/pbf2osm
OSM_CHECKSUM=	world/bin/osm-checksum
PBF2PBF=	world/bin/pbf2pbf
OSM2GARMIN=		world/bin/pbf2osm --garmin-osm
OSM2GARMIN_CYCLE=	world/bin/pbf2osm --garmin-cycle
OSM2GARMIN_ONROAD=	world/bin/pbf2osm --garmin-onroad
OSM2GARMIN_ALL=		world/bin/pbf2osm --garmin-osm:onroad
OSM2GARMIN_OSEAM=	world/bin/pbf2osm --garmin-oseam
OSM2GARMIN_SRTM=        world/bin/pbf2osm --garmin-srtm
OSM2PNG=	world/bin/wrapper-instable world/bin/bomb --timeout=1400 -- env max_file_size_maperitive=200000 world/bin/pbf2osm --png-osm
OSM2SVG=	world/bin/wrapper-instable world/bin/bomb --timeout=1400 -- env max_file_size_maperitive=200000 world/bin/pbf2osm --svg-osm
OSM2SHAPE=	world/bin/pbf2osm --shape
OSM2OSMAND=	world/bin/pbf2osm --osmand
OSM2NAVIT=	world/bin/wrapper-instable world/bin/pbf2osm --navit
OSM2MAPSFORGE=	world/bin/pbf2osm --mapsforge-osm
OSM2MAPSME=	world/bin/pbf2osm --mapsme-osm

CITIES_DB=	world/etc/cities.csv
CITIES_FILE=world/etc/cities.txt
DB=world/bin/bbbike-db --city-database=${CITIES_DB}

GZIP:=             $(shell which pigz gzip | head -1)
BZIP2:=            $(shell which pbzip2 bzip2 | head -1)
OSMOSIS=	osmosis -q
OSMOSIS_BUFFER_CAPACITY=6000

OSM_DIR=	osm
OSP_DIR=	osp
DATA_OSM_DIR=	data-osm
DATA_OSM_BBBIKE_DIR=	data-osm.bbbike
OSMBIKE_DATA=	${DATA_OSM_BBBIKE_DIR}.tgz
DATA_DIR=	data
BBBIKE_CACHE_DIR=	/var/cache/bbbike
LIGHTTPD_CACHE_DIR=	/var/cache/lighttpd
MAX_OSMOSIS=	${MAX_CPU}
MAX_OSMCONVERT=	${MAX_CPU}
LANGUAGES=	m de en es fr ru
ELEVATION_SCRIPT=world/bin/elevation-database
MAX_ELEVATION_SCRIPTS=	1
BBBIKE_SERVER=""

BBBIKE_WEBSERVER_DOWNLOAD_DIR=/usr/local/www/download.bbbike.org
BBBIKE_WEBSERVER_DIR=/usr/local/www/bbbike.org
BBBIKE_WEB_DIR= ./
CACHE_HEATER_MAX=50
TMP=world/tmp
RM_BG=	world/bin/rm-bg
WEB_GROUP=	www-data
EXTRACTS_SPOOL_DIR=/var/cache/extract
POSTGIS_STYLE=/usr/share/osm2pgsql/osm2pgsql/bbbike.style
POSTGIS_STYLE9=/usr/share/osm2pgsql/bbbike.style
BBBIKE_WEB_SERVER	?= www.bbbike.org
BBBIKE_API_SERVER	?= api.bbbike.org
API_DIR=	api/0.2
LOG_DIR=tmp
BBBIKE_PARTITION=	/bbbike

OSMOSIS_PLUGIN_DIR=$$HOME/.openstreetmap/osmosis/plugins


# BBBIKE_RANDOM_FILES=1
PROVE_FILES=	t/*.t world/t/*.t

CITIES=$(shell ${PERL} -npe 's/\#.*//' ${CITIES_FILE})
CITIES_BY_AREA=$(shell world/bin/bbbike-db --list-by-area)

TILES_DIR=	tile

#
# opensearch suggestion service for
# the world:
#
OSM_AREAS_OPENSEARCH=data-opensearch-places
OSM_PLANET=	../osm/download/planet-latest.osm.bz2
OSM_PLANET_PBF=	../osm/download/planet-latest-nometa.osm.pbf

#OSM_PLANET_PBF=	../osm/download/planet-latest.osm.pbf
#OSM_PLANET_PBF=	../osm/download/geofabrik/europe/germany/brandenburg.osm.pbf
#OSM_PLANET_PBF=	../osm/download/srtm/Hoehendaten_Freizeitkarte_Europe.osm.pbf
#OSM_PLANET_PBF=/usr/local/www/download.bbbike.org/osm/srtm/e40/planet-srtm-e40.osm.pbf
#OSM_PLANET_PBF=        ../osm/download/geofabrik/europe/germany-latest.osm.pbf

OSM_AREAS_LARGE=	${OSM_PLANET_PBF}

OSM_AREAS= \
	../osm/download/geofabrik/europe/germany.osm.pbf \
	${OSM_AREAS_LARGE} \
	../osm/download/geofabrik/australia-oceania.osm.pbf \
	../osm/download/geofabrik/south-america.osm.pbf \
	../osm/download/geofabrik/africa.osm.pbf \
	../osm/download/geofabrik/central-america.osm.pbf \
	../osm/download/geofabrik/europe.osm.pbf \

# for tests only
OSM_AREAS2= \
	../osm/download/geofabrik/europe/germany/baden-wuerttemberg.osm.pbf \
	../osm/download/geofabrik/europe/germany/bayern.osm.pbf \
	../osm/download/geofabrik/europe/germany/berlin.osm.pbf \
	../osm/download/geofabrik/europe/germany/brandenburg.osm.pbf \
	../osm/download/geofabrik/europe/germany/bremen.osm.pbf

OSM_AREAS3= \
	${OSM_AREAS_LARGE} \


all: help

build-runtime-perl:
	@world/bin/bbbike-build-runtime-perl.pl

build-runtime-symlinks:
	@world/bin/bbbike-build-symlinks

build-runtime: build-runtime-perl build-runtime-symlinks
	@world/bin/bbbike-build-runtime


convert-wgs84 convert: build-runtime convert2 #convert-post

convert-post: create-osp bbbike2wgs84 elevation-update

# convert bbbike files from OSM files
convert-bbbike-full: build-runtime-perl
	${BBMAKE} DATA_OSM_DIR=${DATA_OSM_BBBIKE_DIR} OSM2BBD_MAPTYPE="-map bbbike" convert2
	rm -f ${DATA_OSM_BBBIKE_DIR}/*/opensearch.*
	rm -f ${DATA_OSM_BBBIKE_DIR}/*/_*
	rm -f ${DATA_OSM_BBBIKE_DIR}/*/*.gz
	set -e; for i in ${CITIES}; do \
	   ( cd ${DATA_OSM_BBBIKE_DIR}; tar cf - $$i | ${BZIP2} > $$i.tbz.tmp; mv -f $$i.tbz.tmp $$i.tbz; \
	     rm -rf $$i ); \
	done

# convert bbbike files from wgs84, much faster
convert-bbbike: build-runtime-perl
	echo ${CITIES} | ${XARGS} -E " " -n4 -P${MAX_CPU} ./world/bin/wgs84-to-bbbike
	tar --exclude='_*' -cf - ${DATA_DIR} | ${NICE} bzip2 > ${DATA_OSM_BBBIKE_DIR}/data.tbz.tmp
	mv -f ${DATA_OSM_BBBIKE_DIR}/data.tbz.tmp ${DATA_OSM_BBBIKE_DIR}/data.tbz

_tarball:
	tar --exclude='_*' -cf - ${DATA_OSM_BBBIKE_DIR} | ${NICE} ${GZIP} > ${OSMBIKE_DATA}.tmp
	mv -f ${OSMBIKE_DATA}.tmp ${OSMBIKE_DATA}
	mkdir -p ../bbbike-macos/download
	cp -f ${OSMBIKE_DATA} ../bbbike-macos/download
	tar --exclude='_*' -cf - ${DATA_DIR} | ${NICE} ${BZIP2} > ${DATA_DIR}.tbz.tmp
	mv -f ${DATA_DIR}.tbz.tmp ${DATA_DIR}.tbz

cities-api:
	@for i in `${PERL} -e 'print "x " x 2'`; do ${BBMAKE} _cities; done
	${BBMAKE} cleanup-osm-error
	${BBMAKE} _cities_complete
	${BBMAKE} check-osm

OSMOSIS_BOUNDING_BOX=       --bounding-box left=-180 right=180 top=90 bottom=-90 clipIncompleteEntities=true
OSMOSIS_BOUNDING_POLYGON=   clipIncompleteEntities=true
OSMOSIS_BOUNDING_OPT= ${OSMOSIS_BOUNDING_POLYGON}
#  completeWays=no completeRelations=no
_osmosis_opt:
	for i in ${CITIES}; do printf " --bounding-polygon file=${OSM_DIR}/$$i/$$i.poly ${OSMOSIS_BOUNDING_OPT} --wx file=${OSM_DIR}/$$i/$$i.osm.gz"; done

_osmosis_opt_pbf:
	if [ "$$OSM_DIR_NOSUBDIR" = "true" ]; then \
	  for i in ${CITIES}; do printf " --bounding-polygon file=${OSM_DIR}/$$i.poly ${OSMOSIS_BOUNDING_OPT} --write-pbf file=${OSM_DIR}/$$i.osm.pbf omitmetadata=true"; done; \
	else \
	  for i in ${CITIES}; do printf " --bounding-polygon file=${OSM_DIR}/$$i/$$i.poly ${OSMOSIS_BOUNDING_OPT} --write-pbf file=${OSM_DIR}/$$i/$$i.osm.pbf omitmetadata=true"; done; \
	fi

cities-poly: poly
	${NICE5} ${BZIP2} -dc ${OSM_PLANET} | ${NICE5} ${OSMOSIS} --fast-read-xml enableDateParsing=no /dev/stdin --buffer bufferCapacity=${OSMOSIS_BUFFER_CAPACITY} --tee `${BBMAKE} CITIES_DB=${CITIES_DB} CITIES="${CITIES}" -s city-count` `${BBMAKE} CITIES_DB=${CITIES_DB} CITIES="${CITIES}" -s _osmosis_opt`

_cities-osm: poly
	${NICE5} ${OSMOSIS} --read-pbf ${OSM_PLANET_PBF} --buffer bufferCapacity=${OSMOSIS_BUFFER_CAPACITY} --tee `${BBMAKE} -s CITIES="${CITIES}" CITIES_DB=${CITIES_DB} city-count` `${BBMAKE} -s CITIES="${CITIES}" CITIES_DB=${CITIES_DB} _osmosis_opt`

_cities-pbf: poly
	${NICE5} ${OSMOSIS} --read-pbf ${OSM_PLANET_PBF} --buffer bufferCapacity=${OSMOSIS_BUFFER_CAPACITY} --tee `${BBMAKE} -s CITIES="${CITIES}" CITIES_DB=${CITIES_DB} city-count` `${BBMAKE} -s CITIES="${CITIES}" CITIES_DB=${CITIES_DB} _osmosis_opt_pbf`
	test "$$NO_PBF2PBF" = "true" || ${BBMAKE} CITIES="${CITIES}" _pbf2pbf

cities: cities-parallel

cities-pbf: _cities-pbf
	${BBMAKE} _pbf2pbf-checksum

cities-osm: _cities-osm
	${BBMAKE} osm2pbf

# if an extract does not exists localy, try to fetch it from the web
fetch-extracts fetch-extracts-pbf fetch:
	set -e; \
	tmpfile=$$(mktemp); echo '# dummy' > $$tmpfile; \
	for i in ${CITIES}; do \
	   if [ ! -e ${OSM_DIR}/$$i/$$i.osm.pbf ]; then \
	      url=https://download.bbbike.org; \
	      printf "set -e; mkdir -p ${OSM_DIR}/$$i; \
	        curl -sSf -A BBBike.org/fetch-extracts -o ${OSM_DIR}/$$i/$$i.osm.pbf \
		  $$url/osm/bbbike/$$i/$$i.osm.pbf; " >> $$tmpfile; \
		if [ $@ != 'fetch-extracts-pbf' ]; then \
	      	   printf "./world/bin/pbf2osm ${OSM_DIR}/$$i/$$i.osm.pbf | ${GZIP} > ${OSM_DIR}/$$i/$$i.osm.gz.tmp; \
	             mv -f ${OSM_DIR}/$$i/$$i.osm.gz.tmp ${OSM_DIR}/$$i/$$i.osm.gz" >> $$tmpfile; \
		fi; \
		printf "\0" >> $$tmpfile; \
	   fi; \
	done; \
	time ${XARGS} -n1 -0 -P${MAX_HCPU} /bin/sh -c < $$tmpfile; rm -f $$tmpfile;

osm2pbf:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.gz\0, ' | ${XARGS} -n 1 -0 -P${MAX_OSM2PBF} ${OSM2PBF}

pbf2osm:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | \
	  env MULTI_CPU=NO ${XARGS} -n1 -0 -P${MAX_PBF2OSM} ${PBF2OSM} --gzip
	${BBMAKE} _pbf2osm-checksum
_pbf2osm-checksum:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.gz\0, ' | ${XARGS} -n 1 -0 -P${MAX_PBF2OSM} ${OSM_CHECKSUM}



pbf2csv:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | \
	  env MULTI_CPU=NO ${XARGS} -n1 -0 -P${MAX_CPU} ${PBF2OSM} --csv-xz
	${BBMAKE} _pbf2csv-checksum
_pbf2csv-checksum:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.csv.xz\0, ' | ${XARGS} -n 1 -0 -P${MAX_PBF2OSM} ${OSM_CHECKSUM}


pbf2opl:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | \
	  env MULTI_CPU=NO ${XARGS} -n1 -0 -P${MAX_PBF2OPL} ${PBF2OSM} --opl-xz
	${BBMAKE} _pbf2opl-checksum

pbf2geojson:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | \
	  env MULTI_CPU=NO ${XARGS} -n1 -0 -P${MAX_PBF2OPL} ${PBF2OSM} --geojson-xz

pbf2geojsonseq:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | \
	  env MULTI_CPU=NO ${XARGS} -n1 -0 -P${MAX_PBF2OPL} ${PBF2OSM} --geojsonseq-xz

pbf2text:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | \
	  env MULTI_CPU=NO ${XARGS} -n1 -0 -P${MAX_PBF2OPL} ${PBF2OSM} --text-xz

pbf2sqlite:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | \
	  env MULTI_CPU=NO ${XARGS} -n1 -0 -P${MAX_CPU} ${PBF2OSM} --sqlite-xz


_pbf2opl-checksum:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.opl.xz\0, ' | ${XARGS} -n 1 -0 -P${MAX_PBF2OSM} ${OSM_CHECKSUM}


_pbf2pbf:
	if [ "$$OSM_DIR_NOSUBDIR" = "true" ]; then \
	  echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_.osm.pbf\0, ' | ${XARGS} -n32 -0 -P${MAX_PBF2OSM} ${PBF2PBF}; \
	else \
	  echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | ${XARGS} -n1 -0 -P${MAX_PBF2OSM} ${PBF2PBF}; \
	fi
_pbf2pbf-checksum:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | ${XARGS} -n 1 -0 -P${MAX_PBF2OSM} ${OSM_CHECKSUM}


osm2garmin: osm2garmin-multi
osm2garmin-single: osm2garmin-osm osm2garmin-onroad osm2garmin-opentopo # osm2garmin-oseam osm2garmin-cycle osm2garmin-leisure osm2garmin-bbbike osm2garmin-openfietslite check-zip
osm2garmin-multi:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,world/bin/osm2garmin '${OSM_DIR}'/$$_/$$_.osm.pbf onroad:onroad-latin1:osm:opentopo\0, ' | env osm2xxx_max_jobs=2 java_heap=5G ${XARGS} -n 1 -0 -P${MAX_CPU3} /bin/sh -c

osm2garmin-osm:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | env osm2xxx_max_jobs=1 ${XARGS} -n 1 -0 -P${MAX_OSM2GARMIN} ${OSM2GARMIN}

osm2garmin-cycle:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | env osm2xxx_max_jobs=1 ext=cycle ${XARGS} -n 1 -0 -P${MAX_OSM2GARMIN} ${OSM2GARMIN}
osm2garmin-leisure:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | env osm2xxx_max_jobs=1 ext=leisure ${XARGS} -n 1 -0 -P${MAX_OSM2GARMIN} ${OSM2GARMIN}
osm2garmin-bbbike:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | env osm2xxx_max_jobs=1 ext=bbbike ${XARGS} -n 1 -0 -P${MAX_OSM2GARMIN} ${OSM2GARMIN}
osm2garmin-onroad:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | env osm2xxx_max_jobs=1 ext=onroad ${XARGS} -n 1 -0 -P${MAX_OSM2GARMIN} ${OSM2GARMIN}
osm2garmin-opentopo:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | env osm2xxx_max_jobs=1 ext=opentopo ${XARGS} -n 1 -0 -P${MAX_OSM2GARMIN} ${OSM2GARMIN}
osm2garmin-openfietslite:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | env osm2xxx_max_jobs=1 ext=openfietslite ${XARGS} -n 1 -0 -P${MAX_OSM2GARMIN} ${OSM2GARMIN}
osm2garmin-oseam:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | env osm2xxx_max_jobs=1 ext=oseam ${XARGS} -n 1 -0 -P${MAX_OSM2GARMIN} ${OSM2GARMIN}

osm2png:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | BBBIKE_MAPERITIVE_MAPSTYLE=google ${XARGS} -n 1 -0 -P${MAX_OSM2PNG} ${OSM2PNG}
osm2svg:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | BBBIKE_MAPERITIVE_MAPSTYLE=google ${XARGS} -n 1 -0 -P${MAX_OSM2SVG} ${OSM2SVG}

osm2obf osm2osmand:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | env osm2xxx_max_jobs=1 ${XARGS} -n 1 -0 -P${MAX_OSM2OSMAND} ${OSM2OSMAND}
osm2mapsforge:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | env osm2xxx_max_jobs=1 ${XARGS} -n 1 -0 -P${MAX_OSM2MAPSFORGE} ${OSM2MAPSFORGE}

osm2navit:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | ${XARGS} -n 1 -0 -P${MAX_OSM2NAVIT} ${OSM2NAVIT}
osm2shape osm2shp:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | ${XARGS} -n 1 -0 -P${MAX_OSM2SHAPE} ${OSM2SHAPE}

osm2omim osm2mapsme:
	echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | ${PERL} -ne 'chomp; print qq,'${OSM_DIR}'/$$_/$$_.osm.pbf\0, ' | ${XARGS} -n 1 -0 -P${MAX_OSM2MAPSME} ${OSM2MAPSME}


osm-readme:
	for i in ${CITIES}; do \
	    perl -npe "s/%{city}/$$i/g" world/download/etc/CITY.txt > ${OSM_DIR}/$$i/HEADER.txt; \
        done

osm-html:
	cd cgi; \
	for i in ${CITIES}; do \
	  ./area.cgi --offline --city=$$i > ../${OSM_DIR}/$$i/index.html & \
	  ( cd ../${OSM_DIR}/$$i; sort -k2 $$i.osm.*.md5 ; sort -k2 $$i.osm*.sha256 ) > ../${OSM_DIR}/$$i/CHECKSUM.txt; \
        done; wait

_cities-parallel:
	@echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | env CITIES_DB=${CITIES_DB} ./world/bin/cities-parallel --xargs ${MAX_OSMOSIS} cities-pbf | ${TIME} ${XARGS} -0 -n1 -P${MAX_OSMOSIS} /bin/sh -c
_cities-parallel-pbf:
	@echo ${CITIES} | ${PERL} -npe 's/\s+/\n/g' | env CITIES_DB=${CITIES_DB} ./world/bin/cities-parallel --xargs ${MAX_OSMOSIS} _cities-pbf | ${TIME} ${XARGS} -0 -n1 -P${MAX_OSMOSIS} /bin/sh -c
_cities-parallel-osmconvert: poly
	@for c in ${CITIES_BY_AREA}; do world/bin/bbbike-db --planet $$c; done | ${TIME} ${XARGS} -0 -n1 -P${MAX_OSMCONVERT} /bin/sh -c
	${BBMAKE} _pbf2pbf-checksum

cities-parallel: _cities-parallel-osmconvert check-osm

_cities:
	@echo ${CITIES} | \
		${PERL} -npe 's/\s+/-download /g' | \
		${XARGS} -n 1 -P ${MAX_PARALLELS_OSM_DOWNLOADS} ${BBMAKE}

_cities_complete:
	${BBMAKE} OSM_TIMEOUT="--timeout=300" `echo ${CITIES} | ${PERL} -npe 's/\s+/-download /g'`
poly:
	${BBMAKE} -j ${MAX_CPU} `echo ${CITIES} | ${PERL} -npe 's/\s+/-poly /g'`

city-count:
	@echo ${CITIES}  | wc -w

city-reorder:
	@cd ${OSM_DIR}; du -ks * | sort -nr | ../world/bin/bbbike-reorder-cities.pl

city-file:
	#( echo Bogota; ${MAKE} -s city-reorder | awk '{print $$2 }' | egrep -v Bogota ) > ${CITIES_FILE}
	${MAKE} -s city-reorder | awk '{print $$2 }'  > ${CITIES_FILE}

city-memory:
	echo ${CITIES} | ${TIME} ${XARGS} -E " " -n1 -P${MAX_RCPU} ./world/bin/bbbike-memory

update-robots.txt:
	( LANG=C; LC_ALL=C; cat world/web/robots.txt.in; \
	  echo ${LANGUAGES} | ${PERL} -npe 's,\s+,\n,g' | sort | egrep -v "^en$$" | \
	   ${PERL} -ne 'chomp; next if $$_ eq "m"; s,^,Disallow: /,; print "$$_/\n" '; \
	  ${PERL} -e 'for ("A".."Z") { print qq{Disallow: /m/$$_\n} }'; \
	  echo ${CITIES} | ${PERL} -npe 's,\s+,\n,g' | sort | \
	   ${PERL} -ne 'chomp; s,^,Disallow: /,; print "$$_/?\n" '; \
          ${DB} --robots-local-lang ${CITIES}; \
	) > world/web/robots.txt


# faster than planet-streets
planet-places:
	@mkdir -p ${OSM_AREAS_OPENSEARCH}
	@PATH=$$PATH:`pwd`/world/bin; \
	for i in ${OSM_AREAS}; do \
		printf "./world/bin/planet-places-suggestions ${OSM_AREAS_OPENSEARCH}/`basename $$i .osm.pbf`-places $$i\0"; \
	done | ${XARGS} -0 -n1 -P${MAX_CPU2} sh -c

planet-streets:
	@mkdir -p ${OSM_AREAS_OPENSEARCH}
	@PATH=$$PATH:`pwd`/world/bin; \
	for i in ${OSM_AREAS}; do \
		printf "./world/bin/planet-streets-suggestions ${OSM_AREAS_OPENSEARCH}/`basename $$i .osm.pbf` $$i\0"; \
	done | ${XARGS} -0 -n1 -P${MAX_CPU2} sh -c

##########################################################################################
# check if the downloaded OSM files are valid
#
check-osm: check-osm-pbf

check-osm-gzip:
	@find ${OSM_DIR} -name '*.gz' -print0 | ${XARGS} -0 -n8 -P${MAX_CPU} ${GZIP} -t

check-osm-pbf:
	@find ${OSM_DIR} -name '*.pbf' -print0 | ${XARGS} -0 -n1 -P${MAX_CPU} osmconvert >/dev/null

check-zip:
	@find ${OSM_DIR} -name '*.zip' -print0 | ${XARGS} -0 -n1 -P${MAX_CPU} unzip -qq -t
	find ${OSM_DIR} -name '*.zip' -size -10k

check-osm-error:
	@find ${OSM_DIR} -name '*.gz' -print0 | ${XARGS} -0 -n8 -P${MAX_CPU} zegrep -l '<error>' || true

cleanup-osm-error:
	${BBMAKE} check-osm 2>&1 | grep ^gzip | awk '{ print $$2 }' | ${PERL} -npe 's,:,,' | sort -u | ${XARGS} rm -f
	@find ${OSM_DIR} -name '*.gz' -print0 | ${XARGS} -0 -n8 -P${MAX_CPU} zegrep -l '<error>' | ${XARGS} rm -f

check-data-osm:
	echo ${CITIES} | ${XARGS} -E " " -n1 -P${MAX_CPU} ./world/bin/check-data-osm

check-routing:
	echo ${CITIES} | ${XARGS} -E " " -n8 -P1 ./world/bin/routing-validate.pl --number=1 | \
	  ${XARGS} -0 -n1 -P${MAX_CPU} sh -c
	echo ${CITIES} | ${XARGS} -E " " -n8 -P1 ./world/bin/routing-validate.pl --number=50 | \
	  ${XARGS} -0 -n1 -P${MAX_CPU} sh -c

check-routing-fast:
	@echo ${CITIES} | ${XARGS} -E " " -n1 -P${MAX_CPU} ./world/bin/routing-validate.pl --number=1 | \
	  ${XARGS} -0 -n1 -P${MAX_CPU} /bin/sh -c
	@echo ${CITIES} | ${XARGS} -E " " -n1 -P${MAX_CPU} ./world/bin/routing-validate.pl --number=4 | \
	  ${XARGS} -0 -n1 -P${MAX_CPU} /bin/sh -c

convert2: convert3 convert-workarounds
# using GNU xargs -P parallel
convert3:
	mkdir -p ${DATA_OSM_DIR}
	cd ${OSM_DIR} # test
	echo ${CITIES} " " | ${PERL} -npe 's/\s+/-convert /g' | \
	   ${XARGS} -n 1 -P ${MAX_CPU} ${TIME} ${BBMAKE}

check: check-runtime
	@echo "In case of failure run:"
	@echo " make check-failed"
	@echo ""
	${BBMAKE} test

check-runtime:
	${BBMAKE} PROVE_FILES="world/t/runtime*.t" test

check-world check-w: check-runtime
	@echo "In case of failure run:"
	@echo " make check-failed"
	@echo ""
	${BBMAKE} PROVE_FILES="world/t/*.t" test

check-full: check-runtime
	@echo "In case of failure run:"
	@echo " BBBIKE_TEST_FAST=\"\" BBBIKE_TEST_LONG=1 make check-failed"
	@echo ""
	BBBIKE_TEST_FAST="" BBBIKE_TEST_LONG=1 ${BBMAKE} test

check-devel:
	prove world/t/website-images.t  ./world/t/080-perlcheck.t

check-failed: check-runtime
	TMPDIR=${TMP_DIR} LANG=C LC_ALL=C time prove --state=failed

check-bbd:
	for i in ${CITIES}; do echo ${DATA_OSM_DIR}/$$i; done | \
	  ${XARGS} -n 1 -P ${MAX_CPU} ./miscsrc/check_bbd --debug=0 -dir

convert-workarounds:

osm2bbd-workarounds opensearch:
	for i in ${CITIES}; do echo $$i; done | \
	  ${XARGS} -n 1 -P ${MAX_CPU} world/bin/osm2bbd-workarounds ${DATA_OSM_DIR}

bbbike-osm2pbf:
	find ${OSM_DIR} -name '*.osm.gz' -print0 | ${XARGS} -0 -n 1 -P ${MAX_CPU} ${OSM2PBF}

opensearch-bbbike:
	world/bin/opensearch-suggestion --gps=0 --input-charset=iso-8859-1 < data/strassen > data/opensearch.streetnames

_c = ${CITIES}
_cd = $(_c:=-download)
_cc = $(_c:=-convert)
_cp = $(_c:=-poly)
_co = $(_c:=-osmconvert)


$(_cd):
	c=`basename $@ -download`; mkdir -p ${OSM_DIR}/$$c; \
		${DOWNLOADOSM} --step=`${DB} --step $$c` -o ${OSM_DIR}/$$c -- `${DB} --coord $$c`

$(_cc):
	${DB} --lang `basename $@ -convert` >/dev/null
	c=`basename $@ -convert`; \
	  test -n "$$c"; \
	  mkdir -p ${DATA_OSM_DIR}/tmp; \
	  rm -rf ${DATA_OSM_DIR}/tmp/$$c; \
	  if [ -e ${LOG_DIR}/city.$$c.log ]; then gzip -f ${LOG_DIR}/city.$$c.log; fi; \
	  ( \
	    ${TIME} ${OSM2BBD} -lang `${DB} --lang $$c` -o ${DATA_OSM_DIR}/tmp/$$c ${OSM_DIR}/$$c/$$c.osm.pbf; \
	    ${TIME} world/bin/osm2bbd-workarounds ${DATA_OSM_DIR}/tmp $$c; \
	  ) > ${LOG_DIR}/city.$$c.log 2>&1 ; \
	  if [ $$? != 0 ]; then \
	    tail -n 40 ${LOG_DIR}/city.$$c.log; \
	    exit 1; \
	  fi; \
	  rm -rf ${DATA_OSM_DIR}/$$c; mv ${DATA_OSM_DIR}/tmp/$$c ${DATA_OSM_DIR}

$(_cp):
	if [ "$$OSM_DIR_NOSUBDIR" = "true" ]; then \
	    c=`basename $@ -poly`; ${DB} --poly $$c > ${OSM_DIR}/$$c.poly; \
	else \
	    c=`basename $@ -poly`; mkdir -p ${OSM_DIR}/$$c; ${DB} --poly $$c > ${OSM_DIR}/$$c/$$c.poly.tmp; mv -f ${OSM_DIR}/$$c/$$c.poly.tmp ${OSM_DIR}/$$c/$$c.poly; \
	fi

$(_co):
	c=`basename $@ -osmconvert`; world/bin/bbbike-db --planet $$c | xargs -0 /bin/sh -c

${CITIES}:
	${BBMAKE} $@-download $@-convert
	
######################################################################

rsync: sync-sitemap osm-header _rsync rsync-osm
rsync-bg: _rsync

_rsync:
	rsync -a --delay-updates --exclude='*.bak' --exclude='*.tmp' --exclude='*.gz' --exclude=${LOG_DIR} --delete-excluded --delete --max-delete=512 ${DATA_OSM_DIR} ${BBBIKE_SERVER}${BBBIKE_WEBSERVER_DIR}
	-rsync -av --exclude='*.bak' data/opensearch.streetnames ${BBBIKE_SERVER}${BBBIKE_WEBSERVER_DIR}/data
	@echo ""
	@echo "don't forget to cleanup the data cache in ${BBBIKE_CACHE_DIR}, run:"
	@echo "$$ sudo make clean-cache; make cache-heater"

rsync-osm:
	rsync -a --delay-updates --exclude='*.bak' --exclude='*.tmp' ${OSM_DIR} ${BBBIKE_SERVER}${BBBIKE_WEBSERVER_DIR}

# delete old files
rsync-osm-full:
	rsync -a --delay-updates --exclude='*.bak' --exclude='*.tmp' --delete-excluded --delete --max-delete=512 ${OSM_DIR} ${BBBIKE_SERVER}${BBBIKE_WEBSERVER_DIR}


osm-header:
	if ! test -e ${OSM_DIR}/HEADER.txt; then \
	   cd ${OSM_DIR}; \
	   ln -fs ../world/download/osm/bbbike/HEADER.txt .; \
	fi

rsync-osm-devel rsync-osm-dev:
	rsync -azv --delay-updates --delete --max-delete=512 bbbike.org:projects/bbbike/osm .

create-bbbike-web-symlinks-bbbike.en.cgi:
	cd ${BBBIKE_WEB_DIR}/cgi && ln -fs bbbike.cgi bbbike.en.cgi

update-feed:
	${MAKE} -C world/web/feed

create-usr-local-bin-symlink: create-perl-symlink create-bash-symlink

create-perl-symlink:
	test -e /usr/local/bin/perl || sudo ln -fs /usr/bin/perl /usr/local/bin/perl
create-bash-symlink:
	test -e /usr/local/bin/bash || sudo ln -fs /bin/bash /usr/local/bin/bash

symlinks: create-bbbike-web-symlinks

create-makefile-symlinks:
	ln -fs world/Makefile.osm ${BBBIKE_WEB_DIR}
	ln -fs Makefile.osm Makefile

create-bbbike-web-symlinks: create-usr-local-bin-symlink create-bbbike-web-symlinks-bbbike.en.cgi index update-feed bbbike-org-t create-bbbike-org-symlinks create-makefile-symlinks
	cd cgi; ln -fs ../world/cgi/bbbike.cgi.config .
	cd world/web; \
	  for i in images html cgi osm data-osm doc osp; do \
	    ln -fs ../../$$i .; \
	  done; \
	  ln -fs images/srtbike1.ico favicon.ico # buggy browsers
	cd world/web && \
	rm -rf ${LANGUAGES}; \
	mkdir -p ${LANGUAGES}; \
	for city in ${CITIES} bbbike; do \
		( rm -rf $$city; mkdir -p $$city; cd $$city; \
		ln -fs ../../cgi/world.cgi index.cgi; \
		ln -fs ../../../cgi/bbbike.cgi $$city.cgi; \
		); \
		for lang in ${LANGUAGES}; do \
		  ( cd $$lang && ln -fs ../$$city ); \
		done; \
	done
	for script in MyCgiSimple.pm api.cgi area.cgi city.cgi livesearch.cgi location.cgi maptype.cgi street-coord.cgi crossing.cgi weather.cgi languages.cgi extract.cgi extract-email.cgi tile-size.cgi livesearch-extract.cgi download.cgi log.cgi route.cgi; do \
	   ( cd ${BBBIKE_WEB_DIR}/cgi && ln -fs ../world/cgi/$$script ); \
	done
	cp -f world/web/index.de.html world/web/de/index.html
	cp -f world/web/index.m.html world/web/m/index.html
	for i in ${LANGUAGES}; do \
		case $$i in \
			m | de );; \
			*) ${PERL} -npe "s,<a href=\"../$$i/\" title=\"(.*?)\">$$i</a>,<span class=\"current_language\" title=\"$1\">$$i</span>,"  world/web/index.en.html > world/web/$$i/index.html;; \
		esac \
	done

create-bbbike-org-symlinks:
	cd images; ln -fs ../world/images/* .
	cd html; ln -fs ../world/html/[a-zO]* .
	cd cgi/msg/; ln -fs ../../world/cgi/msg/* .

bbbike-org-t:
	cd world/web; ln -fs ../../data
	cd cgi; ln -fs bbbike.cgi bbbike-test.cgi

TAGCLOUD=	world/bin/tagcloud
MOBILE_LINKS=	world/bin/mobile-links
INDEX_UPDATE=	world/bin/index-update ${TMP}

tagcloud index:
	( cd world/web && mkdir -p ${LANGUAGES} )
	( cd ${TMP} && rm -f de.cities.* en.cities.* local.cities.* mobile.en )
	${TAGCLOUD} --lang=de --area=de < ${CITIES_DB} > ${TMP}/de.cities.de
	${TAGCLOUD} --lang=de --area=eu < ${CITIES_DB} > ${TMP}/de.cities.eu
	${TAGCLOUD} --lang=de --area=other --level=9 < ${CITIES_DB} > ${TMP}/de.cities.other
	${TAGCLOUD} --lang=en --area=de < ${CITIES_DB} > ${TMP}/en.cities.de
	${TAGCLOUD} --lang=en --area=eu < ${CITIES_DB} > ${TMP}/en.cities.eu
	${TAGCLOUD} --lang=en --area=other --level=9 < ${CITIES_DB} > ${TMP}/en.cities.other
	${TAGCLOUD} --lang=local --area=de < ${CITIES_DB} > ${TMP}/local.cities.de
	${TAGCLOUD} --lang=local --area=eu < ${CITIES_DB} > ${TMP}/local.cities.eu
	${TAGCLOUD} --lang=local --area=other --level=9 < ${CITIES_DB} > ${TMP}/local.cities.other
	${PERL} -i -npe 's,( href="(.*?)/?"), class="C_$$2"$$1,g' ${TMP}/de.cities.* ${TMP}/en.cities.* ${TMP}/local.cities.*
	${MOBILE_LINKS} --local-names=1 --split-city-names=1 --lang=en < ${CITIES_DB} > ${TMP}/mobile.en
	${INDEX_UPDATE} world/web/index.m.html.in > world/web/index.m.html
	${INDEX_UPDATE} world/web/index.de.html.in > world/web/index.de.html
	${INDEX_UPDATE} world/web/index.en.html.in > world/web/index.en.html
	${INDEX_UPDATE} world/web/index.html.in > world/web/index.html


kml:
	world/bin/bbbike-world-kml ${CITIES_DB} > world/web/bbbike-world.kml

bbbike2wgs84:
	./world/bin/bbbike2wgs84

bbbike2wgs84-mapnik:
	if test -e ${LOG_DIR}/bbbike-mapnik.osm.gz; then mv -f ${LOG_DIR}/bbbike-mapnik.osm.gz ${LOG_DIR}/bbbike-mapnik.osm.gz.old; fi
	${NICE} ./miscsrc/bbd2osm --optimize-for=mapnik-bbbike --experiment=cycle-route ${DATA_DIR} | ${GZIP} > ${LOG_DIR}/bbbike-mapnik.osm.gz.tmp
	mv -f ${LOG_DIR}/bbbike-mapnik.osm.gz.tmp ${LOG_DIR}/bbbike-mapnik.osm.gz

bbbike-tile-update:
	cd ../bbbike-eserte; \
	  git pull -q; \
	  git log --format=oneline | head -1 | awk '{ print $$1 }' > .tile-status.new
	# skip update if there are no new git commits
	if cmp ../bbbike-eserte/.tile-status ../bbbike-eserte/.tile-status.new; then \
	  true; \
	else \
	  ${MAKE} bbbike-tile-update-real; \
	fi

bbbike-tile-update-real:
	@echo "Updating postgis database..., see tmp/log.bbbike-mapnik-postgis${POSTGIS_VERSION}"
	${MAKE} DATA_DIR=../bbbike-eserte/data bbbike2wgs84-mapnik
	time ${MAKE} bbbike-mapnik-postgis${POSTGIS_VERSION} > tmp/log.bbbike-mapnik-postgis${POSTGIS_VERSION} 2>&1
	cd ../bbbike-eserte; git log --format=oneline | head -1 | awk '{ print $$1 }' > .tile-status
	${MAKE} tile-cache-cleanup
	prove world/t/mc-tilecheck.t ./world/t/websites.t

bbbike-mapnik-config8:
	if test -e ${POSTGIS_STYLE}; then \
	    mv -f ${POSTGIS_STYLE} ${POSTGIS_STYLE}.bak; \
	fi
	cat /usr/share/osm2pgsql/osm2pgsql/default.style world/tile/etc/bbbike.style.inc > ${POSTGIS_STYLE}

bbbike-mapnik-config9 bbbike-mapnik-config:
	if test -e ${POSTGIS_STYLE9}; then \
	    mv -f ${POSTGIS_STYLE9} ${POSTGIS_STYLE9}.bak; \
	fi
	cat /usr/share/osm2pgsql/default.style world/tile/etc/bbbike.style.inc > ${POSTGIS_STYLE9}


bbbike-mapnik-postgis8:
	osm2pgsql --slim -S ${POSTGIS_STYLE} -c ${LOG_DIR}/bbbike-mapnik.osm.gz
bbbike-mapnik-postgis bbbike-mapnik-postgis9:
	osm2pgsql --cache-strategy sparse --cache=100 --slim -S ${POSTGIS_STYLE9} -c ${LOG_DIR}/bbbike-mapnik.osm.gz

mapnik-restart:
	sudo /etc/init.d/postgresql restart; sleep 1.5
	sudo /etc/init.d/apache2 restart; sleep 1.0
	sudo /etc/init.d/renderd restart; sleep 0.5
	./world/bin/tile-cache-cleanup	

planet-download: planet-download-pbf

planet-download-pbf planet-download-bzip2:
	download_script=$$(pwd)/world/bin/$@; cd ../osm/download && $$download_script

planet-nometa:
	download_script=`pwd`/world/bin/planet-nometa; cd ../osm/download && $$download_script

sub-planet sub-srtm: sub-planet-clean
	mkdir -p ../osm/download/$@
	make -C world/etc/$@
	program=$@ ./world/bin/sub-planet

sub-planet-statistic:
	find ../extract/trash -mtime -7 -type f  | xargs ./world/bin/sub-planet-statistic.pl | awk '{ print $$2 }' | sort | uniq -c | sort -nr

sub-planet-clean:
	rm -f ../osm/download/sub-planet/*.tmp
	rm -f ../osm/download/sub-srtm/*.tmp

planet-geofabrik-download:
	download_script=`pwd`/world/bin/planet-geofabrik-download; \
		cd ../osm/download && $$download_script

create-osp:
	rm -rf ${OSP_DIR}
	mkdir ${OSP_DIR}
	./world/bin/bbbike-world-opensearch-plugin ${OSP_DIR} ${CITIES} bbbike
	
rsync-tgz:
	rsync -a --delay-updates ${DATA_OSM_BBBIKE_DIR}/ ${BBBIKE_SERVER}/usr/local/www/download.bbbike.org/bbbike/${DATA_OSM_DIR}
	rsync -a --delay-updates world/etc/cities.csv ${BBBIKE_SERVER}/usr/local/www/download.bbbike.org/bbbike/${DATA_OSM_DIR}

clean-tile tile-cache-cleanup:
	world/bin/tile-cache-cleanup

clean: rotate-data-osm
	${MAKE} -C world/cgi/msg $@	
	${MAKE} -C world/bin $@	
	${MAKE} -C world/cgi $@	
	${MAKE} -C world/lib $@	
	${MAKE} -C world/cgi/msg $@	
	${MAKE} -C world/web/feed $@	
	${MAKE} -C world/etc/mkgmap $@	
	rm -f *.bak *.tdy *.ERR
	cd world/web && rm -rf ${LANGUAGES}
	cd world/web && rm -rf ${CITIES} bbbike
	rm -f ${OSMBIKE_DATA}
	rm -f world/cgi/msg/*.bak

clean-cache cache-clean:
	-du -hs ${BBBIKE_CACHE_DIR}/
	-du -hs ${BBBIKE_CACHE_DIR}/* 2>/dev/null
	mkdir -p ${BBBIKE_CACHE_DIR}/${BBBIKE_WEB_SERVER} ${BBBIKE_CACHE_DIR}/localhost
	mkdir -p ${BBBIKE_CACHE_DIR}/.tmp.$$$$; \
	    mv -f ${BBBIKE_CACHE_DIR}/*bbbike.org ${BBBIKE_CACHE_DIR}/localhost ${BBBIKE_CACHE_DIR}/.tmp.$$$$ || true; \
	    rm -rf ${BBBIKE_CACHE_DIR}/.tmp.$$$$ &

# XXX: we dont a caching web server
cache-clean-lighttpd:
	mkdir -p ${LIGHTTPD_CACHE_DIR}/${BBBIKE_WEB_SERVER} \
	  ${LIGHTTPD_CACHE_DIR}/dev.bbbike.org \
	  ${LIGHTTPD_CACHE_DIR}/devel.bbbike.org \
	  ${LIGHTTPD_CACHE_DIR}/localhost.bbbike.org \
	  ${LIGHTTPD_CACHE_DIR}/compress
	find /var/cache/lighttpd/ -type f -print0 | ${PERL} -n0e unlink
	chown -R www-data:www-data ${LIGHTTPD_CACHE_DIR}

cache-gc:
	find ${BBBIKE_CACHE_DIR}/ -type f -mtime +21 -print0 | sudo ${PERL} -n0e unlink

rotate-data-osm:
	rm -rf ${DATA_OSM_DIR}.old2 ${DATA_OSM_BBBIKE_DIR}.old2
	if [ -e ${DATA_OSM_DIR}.old ]; then mv ${DATA_OSM_DIR}.old ${DATA_OSM_DIR}.old2; fi
	if [ -e ${DATA_OSM_DIR}     ]; then mv ${DATA_OSM_DIR}     ${DATA_OSM_DIR}.old; fi
	if [ -e ${DATA_OSM_BBBIKE_DIR}.old ]; then mv ${DATA_OSM_BBBIKE_DIR}.old ${DATA_OSM_BBBIKE_DIR}.old2; fi
	if [ -e ${DATA_OSM_BBBIKE_DIR}     ]; then mv ${DATA_OSM_BBBIKE_DIR}     ${DATA_OSM_BBBIKE_DIR}.old; fi
	mkdir -p ${DATA_OSM_BBBIKE_DIR}
	git checkout ${DATA_OSM_DIR}

rotate-osm:
	rm -rf ${OSM_DIR}.old2
	if [ -e ${OSM_DIR}.old ]; then mv ${OSM_DIR}.old  ${OSM_DIR}.old2; fi
	if [ -e ${OSM_DIR}     ]; then mv ${OSM_DIR}      ${OSM_DIR}.old; fi
	git checkout ${OSM_DIR}

update-database: build-runtime
	@${BBMAKE} -s opensearch-bbbike
	${TIME} ./world/bin/update-database
	@${BBMAKE} -s rotate-clean

perlcheck-bbbike-cgi:
	perl -I world/lib -c cgi/bbbike.cgi

perltidy perlcheck: perlcheck-bbbike-cgi
	${MAKE} -C world/cgi/msg $@	
	${MAKE} -C world/bin $@	
	${MAKE} -C world/lib $@	
	${MAKE} -C world/cgi $@	
	${MAKE} -C world/etc $@	
	${MAKE} -C world/web/feed $@	
	${MAKE} -C world/t $@	
	${MAKE} git-diff

jsbeautifier js jsb:
	${MAKE} -C world/html $@
	${MAKE} -C world/tile/web $@
	${MAKE} -C world/etc/extract $@

tidy:
	tidy -i -m -w 128 world/web/help.html

create-sitemap:
	${MAKE} -C world/sitemap sitemaps

sync-sitemap: create-sitemap
	rsync -a world/web/sitemap.xml.gz ${BBBIKE_SERVER}${BBBIKE_WEBSERVER_DIR}/world/web
	rsync -a world/download/sitemap.xml.gz ${BBBIKE_SERVER}${BBBIKE_WEBSERVER_DIR}/../download.bbbike.org

update-files: update-files-fast
update-files-slow: kml create-osp index update-robots.txt create-bbbike-web-symlinks java-config test-org extract-config #create-sitemap

update-files-fast: create-bbbike-web-symlinks
	for i in update-robots.txt create-bbbike-web-symlinks garmin-legend update-javascript; do \
	   LC_ALL=C LANG=C ${BBMAKE} $$i & \
	done; wait
	LC_ALL=C LANG=C ${BBMAKE} kml create-osp index java-config update-javascript test-org extract-config

garmin-legend:
	@if which convert >/dev/null; then \
	    make -C./world/etc/mkgmap legend; \
	else \
	    echo "convert tool not found, imagemagick package not installed? skip"; \
	fi

extract-config:
	if [ -e $$HOME/.bbbike-extract.rc ]; then test -e .bbbike-extract.rc || ln -fs $$HOME/.bbbike-extract.rc . ; fi
	if [ -e $$HOME/.bbbike-extract-pro.rc ]; then test -e .bbbike-extract-pro.rc || ln -fs $$HOME/.bbbike-extract-pro.rc . ; fi

update-javascript bbbike-js:
	make -C./world/html bbbike-js

java-config:
	test -r $$HOME/.osmosis || ln -fs $$HOME/projects/bbbike/world/etc/env/dot.osmosis $$HOME/.osmosis

dist-clean devel-clean distclean: clean temp-clean clean-t data-distclean download-clean \
				  log-clean index-clean cache-clean-local deb-distclean stale-symlink-clean \
				  rotate-clean bootstrap-clean sub-planet-clean
	${MAKE} -C./world/etc/mkgmap distclean
	${MAKE} -C./cgi/msg distclean

distclean-real:
	cd world; git clean -fdx
	git clean -fdx
	${BBMAKE} update-files bbbike-c

bootstrap-clean:
	rm -rf ${BBBIKE_PARTITION}/tmp/bbbike-bootstrap.*

rotate-clean:
	rm -rf rm -rf ${DATA_OSM_DIR}.old rm -rf ${DATA_OSM_DIR}.old2
	rm -rf rm -rf ${OSM_DIR}.old rm -rf ${OSM_DIR}.old2
	rm -rf rm -rf ${DATA_OSM_BBBIKE_DIR}.old rm -rf ${DATA_OSM_BBBIKE_DIR}.old2

tilesize-clean clean-tilesize-db:
	rm -f /var/tmp/_tilesize-$$(perl -e 'print $$<')-*

stale-symlink-clean:
	find . -type l -print0 | perl -n0e 'unlink if ! -e'

index-clean:
	rm -f ${TMP}/??.cities.*
	rm -f ${TMP}/mobile.en
	rm -f ${TMP}/local.*
	
distclean-osm: rotate-osm

clean-t:
	${MAKE} -C./t distclean
	${MAKE} -C./world/t distclean

temp-clean:
	rm -rf ${TMP_DIR}

cache-clean-local: tilesize-clean
	rm -rf ./cache
	rm -rf /tmp/bbbike-localhost-$$(perl -e 'print $$<')-*
	rm -rf /tmp/bbbike-cgicache-$$(perl -e 'print $$<')-*

log-clean:
	rm -f log.check log.check-full log.check-world
	rm -f tmp/*.log

download-clean:
	rm -rf ../osm/download/tmp.[0-9]*

clean-planet:
	${RM_BG} ../osm/download/*.old.*

elevation-check:
	${NICE} ${ELEVATION_SCRIPT} --database=../osm/srtm/elevation.db --check

elevation-repair:
	${NICE} ${ELEVATION_SCRIPT} --database=../osm/srtm/elevation.db --repair-database

elevation-fetch:
	${NICE} ${ELEVATION_SCRIPT} --database=../osm/srtm/elevation.db --debug=1 --geonames-user=bbbikeworld ${CITIES}

elevation-update:
	echo ${CITIES} | ${XARGS} -E " " -n500 -P${MAX_ELEVATION_SCRIPTS} ${ELEVATION_SCRIPT} --readonly-database --database=../osm/srtm/elevation.db --debug=0

# re-build cache
_cache-heater: cache-gc cache-heater-homepage cache-heater-opensearch cache-heater-osp cache-heater-streets cache-heater-searches cache-du purge-cache-js
cache-heater: _cache-heater

# do not care about cache failures
cache-heater-k:
	${BBMAKE} cache-heater || true

cache-du:
	@echo "cache usage"
	du -hs ${BBBIKE_CACHE_DIR}/
	@if `ls ${BBBIKE_CACHE_DIR}/* >/dev/null`; then du -hs ${BBBIKE_CACHE_DIR}/*; fi

cache-heater-streets:
	echo ${CITIES} | ${PERL} -npe 's/ /\n/g' | \
		${PERL} -e 'while(<>) { chomp; push @a, "https://'${BBBIKE_WEB_SERVER}'/$$_/streets.html"; push @b, "https://'${BBBIKE_WEB_SERVER}'/en/$$_/streets.html" } print join "\0", @a, ""' | \
                cat > tmp/$@.txt
		${XARGS} -0 -n8 -P2 curl -sS ${CURL_USER_AGENT} -X PURGE < tmp/$@.txt >/dev/null
		${XARGS} -0 -n1 -P${MAX_CPU} curl -sSf ${CURL_USER_AGENT} < tmp/$@.txt >/dev/null

purge-cache-js:
		find html \( -name '*.js' -or -name '*.css' \) -print0 | perl -0npe 's,^,https://'${BBBIKE_WEB_SERVER}'/,g' | ${XARGS} -0 -n1 -P1 curl -sS ${CURL_USER_AGENT} -X PURGE

cache-heater-searches:
	random=$$(bash -c 'echo $$RANDOM'); \
	for city in ${CITIES}; do \
            perl -e 'print qq{curl -sSf -A "BBBike.org-CacheHeater/1.0" "https://'${BBBIKE_WEB_SERVER}/$$city/?$$(./world/bin/bbbike-db --startc $$city)'&pref_cat=N1&pref_quality=Q2&cache='$$random'" | egrep real_time\0}'; \
	done > tmp/$@.txt.tmp
	mv -f tmp/$@.txt.tmp tmp/$@.txt
	${XARGS} -0 -n1 -P${MAX_CPU} /bin/bash -c < tmp/$@.txt > tmp/$@.log
	perl -n0pe 's/^curl/curl -X PURGE/; s/\|.*\0/\0/' tmp/$@.txt | ${XARGS} -0 -n1 /bin/sh -c >/dev/null

cache-heater-homepage: cache-heater-osp
	echo ${CITIES} | ${PERL} -npe 's/ /\n/g' | \
		${PERL} -e 'while(<>) { chomp; push @a, "https://'${BBBIKE_WEB_SERVER}'/$$_/"; push @b, "https://'${BBBIKE_WEB_SERVER}'/en/$$_/"; push @c, "https://'${BBBIKE_WEB_SERVER}'/m/$$_/" } print join "\0", @a, ""' | \
                cat > tmp/$@.txt
		${XARGS} -0 -n8 -P2 curl -sS ${CURL_USER_AGENT} -X PURGE < tmp/$@.txt >/dev/null
		${XARGS} -0 -n1 -P${MAX_CPU} curl -sSf ${CURL_USER_AGENT} < tmp/$@.txt >/dev/null


cache-heater-osp:
	find osp -name '*.xml' -print0 | perl -n0e 'print qq{https://'${BBBIKE_WEB_SERVER}'/$$_}' | \
                cat > tmp/$@.txt
		${XARGS} -0 -n8 -P2 curl -sS ${CURL_USER_AGENT} -X PURGE < tmp/$@.txt >/dev/null
		${XARGS} -0 -n8 -P${MAX_CPU} curl -sSf ${CURL_USER_AGENT} < tmp/$@.txt >/dev/null

cache-heater-opensearch:
	cat ${BBBIKE_WEBSERVER_DIR}/data-osm/*/opensearch.streetnames | wc -c >/dev/null

varnish-purge-all:
	./world/bin/varnish-purge-all

symlink-download:
	cd ${BBBIKE_WEBSERVER_DIR}/../download.bbbike.org; \
	  ln -fs ../bbbike.org/world/download/favicon.ico . ; \
	  ln -fs ../bbbike.org/world/download/osm/index.html  . ; \
	  ln -fs ../bbbike.org/world/web/robots-download.txt robots.txt ; \
	  cd osm; ln -fs ../../bbbike.org/world/download/osm/index.html  .

cache-install:
	cd ${BBBIKE_PARTITION}; mkdir -p cache
	ln -fs ${BBBIKE_PARTITION}/cache ${BBBIKE_CACHE_DIR}

# make EXTRACTS_SPOOL_DIR=/var/cache/extract-pro extract-install
extract-install extract-bbbike-org-install:
	mkdir -p /tmpfs
	mkdir -p ${BBBIKE_PARTITION}/$$(basename ${EXTRACTS_SPOOL_DIR})
	#chown -R ${LOGNAME} ${BBBIKE_PARTITION}/
	if [ ! -e ${EXTRACTS_SPOOL_DIR} ]; then \
	   ln -fs ${BBBIKE_PARTITION}/$$(basename ${EXTRACTS_SPOOL_DIR}) ${EXTRACTS_SPOOL_DIR}; \
	fi
	ln -fs ${BBBIKE_PARTITION}/projects/osm /var/cache/osm; \
	mkdir -p /usr/local/www/osm
	ln -fs /var/cache/osm /usr/local/www/osm
	mkdir -p ${EXTRACTS_SPOOL_DIR}/confirmed
	mkdir -p ${EXTRACTS_SPOOL_DIR}/running
	mkdir -p ${EXTRACTS_SPOOL_DIR}/osm
	mkdir -p ${EXTRACTS_SPOOL_DIR}/download
	mkdir -p ${EXTRACTS_SPOOL_DIR}/trash
	mkdir -p ${EXTRACTS_SPOOL_DIR}/failed
	mkdir -p ${EXTRACTS_SPOOL_DIR}/failed2
	chmod -R a+rX,gu+w ${EXTRACTS_SPOOL_DIR}/
	chown -R ${LOGNAME}:${WEB_GROUP} ${EXTRACTS_SPOOL_DIR}/
	cp world/bin/osmconvert-wrapper /usr/local/bin
	mkdir -p /usr/local/www
	chown -R ${LOGNAME} /usr/local/www

bbbike-cache-install:
	mkdir -p ${BBBIKE_PARTITION}/cache
	ln -fs ${BBBIKE_PARTITION}/cache ${BBBIKE_CACHE_DIR}; \
	chown -R ${WEB_GROUP}:${WEB_GROUP} ${BBBIKE_PARTITION}/cache
	chmod -R g+w ${BBBIKE_PARTITION}/cache

extract-distclean:
	find ${EXTRACTS_SPOOL_DIR}/ -type f -print0 | xargs -0 rm -f

# garbage collection, 2 days
extract-gc:
	cd ${EXTRACTS_SPOOL_DIR}; find confirmed running download/ -type f -mtime +30 -print0 | xargs -0 rm -f
	# remove large files earlier
	cd ${EXTRACTS_SPOOL_DIR}; find confirmed running download/ -type f -mtime +10 -size +400M -print0 | xargs -0 rm -f
	cd ${EXTRACTS_SPOOL_DIR}; find confirmed running download/ -type f -mtime +14 -size +250M -print0 | xargs -0 rm -f
	if test -e /tmpfs; then \
	    find /tmpfs/ -type f -mtime +1 -print0 | xargs -0 rm -f; \
	fi

# tidy up to speedup download.cgi script
extract-trash-gc:
	trash=../extract/trash; year=$$(date '+%Y'); mkdir -p $$trash-$$year; \
	  if [ $$(find $$trash -name '*.json' -mtime +8 -type f | wc -l ) -gt 0 ]; then \
	    mv $$(find $$trash -name '*.json' -mtime +8 -type f) $$trash-$$year; \
	  fi

extract-gc7:
	@true
	
staging:
	${BBMAKE} -s perlcheck 2>/dev/null
	${BBMAKE} git-push
	${BBMAKE} -C/usr/local/www/bbbike.org git-diff git-pull
	${BBMAKE} -C/usr/local/www/bbbike.org -s update-files
	${BBMAKE} -C/usr/local/www/bbbike.org git-diff
	${BBMAKE} -s purge-cache-js >/dev/null


TILES_TMP=${TILES_DIR}/tmp
_pbf_dir=${TILES_DIR}/lnglat/
_min_size=-size +2000k
# extract 180x360 data tiles from planet.osm
tile-lng:
	mkdir -p ${TILES_DIR}/tmp ${TILES_DIR}/cities tmp
	./world/bin/tile-lng.pl > ${TILES_DIR}/cities/cities2.csv
	awk -F: '{ print $$1 }' ${TILES_DIR}/cities/cities2.csv > ${TILES_DIR}/cities/cities2.txt
	echo "Planet.osm input file: ${OSM_PLANET_PBF}" > ${TILES_DIR}/tmp/planet.log

tile-lnglat:
	env TILES_DIR=${TILES_DIR} ./world/bin/tile-lnglat0.sh
	./world/bin/tile-lnglat.pl > ${TILES_DIR}/lnglat.sh

tile-lnglat-run:
	${TIME} env NO_PBF2PBF=true OSM_DIR_NOSUBDIR=true ${XARGS5} -0 -n1 -P${MAX_CPU_80} /bin/sh -c < ${TILES_DIR}/lnglat.sh > ${TILES_TMP}/log.$@ 2>&1

tile-lng-run:
	env OSM_DIR_NOSUBDIR=true NO_PBF2PBF=true LOG_DIR=${TILES_TMP} ${BBMAKE} -s LOG_DIR=${TILES_TMP} \
	   CITIES_FILE=${TILES_DIR}/cities/cities2.txt CITIES_DB=${TILES_DIR}/cities/cities2.csv \
	   MAX_CPU=${MAX_CPU_80} JAVACMD_OPTIONS2= OSM_DIR=${TILES_DIR}/lng _cities-parallel-pbf > ${TILES_TMP}/log.$@ 2>&1

tile-pbf2pbf: tile-pbf2pbf-gt10m tile-pbf2pbf-ge500k tile-pbf2pbf-lt500k tile-pbf-check

# cleanup errors in PBF files
tile-pbf2pbf-gt10m:
	find ${_pbf_dir} -name '*.pbf'  -size 10M -print0  | ${NICE} ${TIME} xargs -0 -n1 -P${MAX_CPU_50} ${PBF2PBF} > ${TILES_TMP}/log.$@ 2>&1
	find ${_pbf_dir} -name '*.pbf'  -size +10M -print0 | ${NICE} ${TIME} xargs -0 -n1 -P${MAX_CPU_50} ${PBF2PBF} >> ${TILES_TMP}/log.$@ 2>&1
tile-pbf2pbf-ge500k:
	find ${_pbf_dir} -name '*.pbf' -size +500k -size -10M -print0 | ${NICE} ${TIME} xargs -0 -n1 -P${MAX_CPU_40} ${PBF2PBF} > ${TILES_TMP}/log.$@ 2>&1
tile-pbf2pbf-lt500k:
	find ${_pbf_dir} -name '*.pbf' -size  500k -print0 | ${NICE} ${TIME} xargs -0 -n16 -P${MAX_CPU_40} ${PBF2PBF} > ${TILES_TMP}/log.$@ 2>&1
	find ${_pbf_dir} -name '*.pbf' -size -500k -print0 | ${NICE} ${TIME} xargs -0 -n16 -P${MAX_CPU_40} ${PBF2PBF} >> ${TILES_TMP}/log.$@ 2>&1

tile-pbf-check:
	@echo "Number of *.pbf files: $$(find ${TILES_DIR}/lnglat -name '*.pbf' -type f | wc -l)"
	@echo "Number of *.pbf file with min ${_min_size}: $$(find ${TILES_DIR}/lnglat -name '*.pbf' ${_min_size} | wc -l)"

tile-convert: \
		tile-convert-shp \
		tile-convert-navit \
		tile-convert-garmin-all \
		tile-convert-mapsforge \
		tile-convert-osmand \
		tile-convert-osm

tile-convert-srtm: tile-convert-garmin-srtm tile-convert-osmand


tile-convert-osm:
	find ${_pbf_dir} -name '*.pbf' ${_min_size} -print0 | \
	  env MULTI_CPU=NO ${NICE} ${TIME} xargs -0 -n1 -P${MAX_PBF2OSM} ${PBF2OSM} --gzip > ${TILES_TMP}/log.$@ 2>&1

tile-convert-csv:
	find ${_pbf_dir} -name '*.pbf' ${_min_size} -print0 | \
	  env MULTI_CPU=NO ${NICE} ${TIME} xargs -0 -n1 -P${MAX_PBF2OSM} ${PBF2OSM} --csv-xz > ${TILES_TMP}/log.$@ 2>&1

tile-convert-shp:
	find ${_pbf_dir} -name '*.pbf' ${_min_size} -print0 | \
	  env MULTI_CPU=NO osm_checksum=true ${NICE} ${TIME} xargs -0 -n1 -P${MAX_CPU} ${OSM2SHAPE} > ${TILES_TMP}/log.$@ 2>&1

tile-convert-mapsme:
	find ${_pbf_dir} -name '*.pbf' ${_min_size} -print0 | \
	  env MULTI_CPU=NO osm_checksum=true ${NICE} ${TIME} xargs -0 -n1 -P${MAX_CPU} ${OSM2MAPSME} > ${TILES_TMP}/log.$@ 2>&1

tile-convert-garmin:
	find ${_pbf_dir} -name '*.pbf' ${_min_size} -print0 | \
	  env MULTI_CPU=NO osm_checksum=true ${NICE} ${TIME} xargs -0 -n1 -P${MAX_CPU_50} ${OSM2GARMIN} > ${TILES_TMP}/log.$@ 2>&1
tile-convert-garmin-onroad:
	find ${_pbf_dir} -name '*.pbf' ${_min_size} -print0 | \
	  env MULTI_CPU=NO osm_checksum=true ${NICE} ${TIME} xargs -0 -n1 -P${MAX_CPU_50} ${OSM2GARMIN_ONROAD} > ${TILES_TMP}/log.$@ 2>&1
tile-convert-garmin-all:
	find ${_pbf_dir} -name '*.pbf' ${_min_size} -print0 | \
	  env MULTI_CPU=NO osm_checksum=true ${NICE} ${TIME} xargs -0 -n1 -P${MAX_CPU_50} ${OSM2GARMIN_ALL} > ${TILES_TMP}/log.$@ 2>&1

tile-convert-garmin-srtm:
	find ${_pbf_dir} -name '*.pbf' ${_min_size} -print0 | \
	  env MULTI_CPU=NO osm_checksum=true ${NICE} ${TIME} xargs -0 -n1 -P${MAX_CPU_50} ${OSM2GARMIN_SRTM} > ${TILES_TMP}/log.$@ 2>&1

tile-convert-osmand:
	find ${_pbf_dir} -name '*.pbf' ${_min_size} -print0 | \
	  env MULTI_CPU=NO osm_checksum=true java_heap=3200M ${NICE} ${TIME} xargs -0 -n1 -P${MAX_CPU_50} ${OSM2OSMAND} > ${TILES_TMP}/log.$@ 2>&1

tile-convert-mapsforge:
	find ${_pbf_dir} -name '*.pbf' ${_min_size} -print0 | \
	  env osm_checksum=true ${NICE} ${TIME} xargs -0 -n1 -P${MAX_CPU_50} ${OSM2MAPSFORGE} > ${TILES_TMP}/log.$@ 2>&1

tile-convert-navit:
	find ${_pbf_dir} -name '*.pbf' ${_min_size} -print0 | \
	  env osm_checksum=true ${NICE} ${TIME} xargs -0 -n1 -P${MAX_CPU} ${OSM2NAVIT} > ${TILES_TMP}/log.$@ 2>&1

tile-extract: tile-lng tile-lnglat tile-lng-run tile-lnglat-run tile-lng-clean #tile-pbf2pbf

tile-csv tile-database:
	rm -f ${TILES_DIR}/etc/tile/*.csv ${TILES_DIR}/etc/tile/*.csv.original
	mkdir -p ${TILES_DIR}/etc/tile
	for format in pbf osm.gz csv.xz; do \
	   touch ${TILES_DIR}/etc/tile/$$format.csv; \
  	     if [ $$(find ${TILES_DIR}/lnglat -name '*.'$$format | wc -l) -gt 0 ]; then \
	       ( cd ${TILES_DIR}/lnglat; \
	       find . -name '*.'$$format -print0 | xargs -0 du -k | sort -n  -k1 -k2 -k3 -k4 -k5 | \
	       awk '{ if ($$1 > 12) { print } }' | \
	       perl -npe 's,\S+/planet_(.*?)\.osm\.\S+,\1,; s,_, ,g' ) > \
		 ${TILES_DIR}/etc/tile/$$format.csv.new; \
	       mv -f ${TILES_DIR}/etc/tile/$$format.csv.new ${TILES_DIR}/etc/tile/$$format.csv; \
	     fi; \
	done
	for format in csv.xz osm.gz; do \
	     touch ${TILES_DIR}/etc/tile/$$format.csv; \
             ./world/bin/tile-padding.pl --min-size=10 \
		${TILES_DIR}/etc/tile/pbf.csv ${TILES_DIR}/etc/tile/$$format.csv | \
		sort -n  -k1 -k2 -k3 -k4 -k5 > ${TILES_DIR}/etc/tile/$$format.csv.new; \
	     mv -f ${TILES_DIR}/etc/tile/$$format.csv ${TILES_DIR}/etc/tile/$$format.csv.original; \
	     mv -f ${TILES_DIR}/etc/tile/$$format.csv.new ${TILES_DIR}/etc/tile/$$format.csv; \
	done
	pwd=`pwd`; max_cpu=${MAX_CPU}; \
	for format in garmin-osm.zip garmin-onroad.zip shp.zip navit.zip obf.zip mapsforge-osm.zip; do \
            echo "Run format $$format"; \
	    (( cd ${TILES_DIR}/lnglat; find . -name '*.'$$format -print0 | xargs -0 -n1 -P1 $$pwd/world/bin/extract-disk-usage.sh --du | sort -n  -k1 -k2 -k3 -k4 -k5 | \
	     perl -npe 's,\S+/planet_(.*?)\.osm\.\S+,\1,; s,_, ,g' ) > ${TILES_DIR}/etc/tile/$$format.csv; \
             $$pwd/world/bin/tile-padding.pl --min-size=10 ${TILES_DIR}/etc/tile/pbf.csv ${TILES_DIR}/etc/tile/$$format.csv | \
		sort -n  -k1 -k2 -k3 -k4 -k5 | awk '{ if ($$1 > 12) { print } }' > ${TILES_DIR}/etc/tile/$$format.csv.new; \
	   	mv -f ${TILES_DIR}/etc/tile/$$format.csv ${TILES_DIR}/etc/tile/$$format.csv.original; \
	   	mv -f ${TILES_DIR}/etc/tile/$$format.csv.new ${TILES_DIR}/etc/tile/$$format.csv; \
	    ) & \
	done; wait
	wc -lc ${TILES_DIR}/etc/tile/*.csv*

tile-database-stat:
	@for i in ${TILES_DIR}/etc/tile/*.csv world/etc/tile/*.csv; do \
	  echo -n "$$i "; \
	  awk '{ s+= $$1 } END { print s/1024/1024, "GB" }' $$i; \
	done

tile-csv-check:
	cd ${TILES_DIR}/lnglat/6; du -ks planet_6_52_7_53.osm*
	@echo ""
	cd ${TILES_DIR}/etc/tile; egrep '6 52 7 53' *.csv

tile-srtm-csv: tile-csv
	cd ${TILES_DIR}/etc/tile; \
	for i in garmin-srtm.zip.csv obf.zip.csv pbf.csv; do \
	  mv -f $$i srtm-$$i; \
	done
	wc -lc ${TILES_DIR}/etc/tile/srtm-*.csv*

tile-aws-s3:
	cd ${TILES_DIR}/etc/tile; \
	  for i in *.csv; do \
	    s3put bbbike/tile/ $$i; \
	    echo "wget http://s3.amazonaws.com/bbbike/tile/$$i"; \
	  done

tile-checksum:
	cd ${_pbf_dir}; pwd=`pwd`; \
	for i in *; do \
	   cd $$pwd/$$i && ( md5sum `ls -v planet*.*` > CHECKSUM.md5; shasum -a 256 `ls -v planet*.*` > CHECKSUM.sha256 & );  \
	done; wait

tile-db-clean:
	rm -rf /var/tmp/_tilesize-*-localhost-*

tile-lng-clean:
	rm -rf ${TILES_DIR}/lng

tile-distclean: tile-db-clean
	rm -rf ${TILES_DIR}

tile-rsync:
	rsync -av ${TILES_DIR}/lnglat/ ${BBBIKE_WEBSERVER_DOWNLOAD_DIR}/osm/planet/${TILES_DIR}/lnglat/

tile-info:
	@echo "Please do not forget to disable the planet.osm update cron job while updating the tile database"

data-distclean distclean-data:
	rm -f data/*.lock data/*.inx[456] data/*.st
	rm -f misc/*.lock misc/*.inx[456]
	find ext -name .lock -type f -print0 | xargs -0 rm -f
	rm -rf ${TMP_DIR}
	rm -f /bbbike/tmp/bbbike_*
	rm -f ../osm/download/sub-*/*.tmp
	find . -name '*.inx*'
	find . -name '*.lock'

#########################################################################
# Note: you need at least 280GB free disk space to run this command!!!
#       this may run 3 days on a quad core machine, or 42 hours on
#       an octacore machine.
#
# quad core:
# real    3570m39.458s
# user    25849m45.852s
# sys     870m48.760s
#
# tail -n2 *run | grep -v swap
# ==> log.tile-lng-run <==
# 118651.85user 270.53system 4:31:47elapsed 729%CPU (0avgtext+0avgdata 4487732maxresident)k
#
# ==> log.tile-lnglat-run <==
# 270131.80user 2225.13system 10:28:15elapsed 722%CPU (0avgtext+0avgdata 2448768maxresident)k
#
#
# tail -n2 log.tile-convert-* | grep -v swaps
# ==> log.tile-convert-osmand <==
# 478053.52user 17962.09system 18:42:39elapsed 736%CPU (0avgtext+0avgdata 3470212maxresident)k
#
# ==> log.tile-convert-garmin <==
# 263711.54user 7440.43system 9:35:07elapsed 785%CPU (0avgtext+0avgdata 2761256maxresident)k
#
# ==> log.tile-convert-mapsforge <==
# 184392.70user 6650.27system 7:07:21elapsed 745%CPU (0avgtext+0avgdata 8157268maxresident)k
#
# ==> log.tile-convert-garmin-onroad <==
# 174377.54user 6966.74system 6:25:58elapsed 783%CPU (0avgtext+0avgdata 2367180maxresident)k
#
# ==> log.tile-convert-navit <==
# 29831.88user 3040.74system 1:13:23elapsed 746%CPU (0avgtext+0avgdata 1270932maxresident)k
#
# ==> log.tile-convert-shp <==
# 15353.14user 7242.06system 48:50.42elapsed 771%CPU (0avgtext+0avgdata 1655804maxresident)k
#
# ==> log.tile-convert-osm <==
# 16477.70user 441.64system 36:40.86elapsed 768%CPU (0avgtext+0avgdata 198320maxresident)k

#
# for errors look in ./tile/tmp
tile: tile-info tile-extract tile-convert tile-database #tile-aws-s3

##############################################################################################
# debian package rules
#
DEB_RELEASE=	$(shell lsb_release -cs)
DEB_VENDOR=	$(shell lsb_release -is | tr  'A-Z' 'a-z')
DEB_TMP=tmp/deb
DEB_DIR=${DEB_TMP}/${DEB_VENDOR}/${DEB_RELEASE}
DEB_MODULE_LIST=world/etc/apt/${DEB_VENDOR}/${DEB_RELEASE}/perl-modules.txt
DEB_MODULE_LIST_DEVEL=world/etc/apt/${DEB_VENDOR}/${DEB_RELEASE}/perl-modules-devel.txt
DEB_PACKAGES=	$(shell ${PERL} -npe 's/\#.*//' ${DEB_MODULE_LIST})
DEB_PACKAGES_DEVEL=	$(shell ${PERL} -npe 's/\#.*//' ${DEB_MODULE_LIST_DEVEL})
DEB_CONTROLS=	$(shell ${MAKE} -s -C./world/etc/apt/${DEB_VENDOR}/${DEB_RELEASE}/equivs)
DEB_REPO_DIR=	/usr/local/www/debian.bbbike.org/
DEB_OPT_DIR=	/var/lib/bbbike/opt
COPY_DEB?= true

#
# basically, we run:
#
# dh-make-perl --build --cpan Our::Perl::Module::not::supported::by::debian
#
# don't forget to run deb-clean first
# --requiredeps
#
# in case of strange errors, please cleanup ~/perl5 first!
#
deb-perl: deb-clean perl-cpan
	mkdir -p ${DEB_DIR}
	set -e; cd ${DEB_DIR}; export PERL5LIB="$$HOME/perl5:$$HOME/perl5/lib/perl5"; \
	for i in ${DEB_PACKAGES}; do \
	    echo "dh-make: $$i"; \
	    dh-make-perl --build --email 'wosch@freebsd.org' --cpan $$i; \
	done
	set -e; for i in ${DEB_DIR}/*.deb; do \
	   env DEB_RELEASE=${DEB_RELEASE} ./world/bin/deb2deb $$i; \
	done
	ls -l ${DEB_DIR}/*.deb
	echo "Number of deps: $$(ls ${DEB_DIR} | egrep '*.deb$$' | wc -l)"

perl-cpan-clean:
	rm -rf $$HOME/perl5 $$HOME/.cpan/build

# XXX: should be part of world/etc/apt/Makefile
# build cpan modules first, and later build deb packages
perl-cpan:
	set -e; \
	for i in ${DEB_PACKAGES_DEVEL} ${DEB_PACKAGES}; do \
	PERL_MB_OPT="--install_base $$HOME/perl5" PERL_MM_OPT="INSTALL_BASE=$$HOME/perl5" PERL5LIB="$$HOME/perl5:$$HOME/perl5/lib/perl5" \
	  cpan $$i; \
	done

# XXX: should be part of world/etc/apt/Makefile
deb-equivs:
	mkdir -p ${DEB_DIR}
	set -e; cd ${DEB_DIR}; \
	for i in ${DEB_CONTROLS}; do \
	    equivs-build $$i; \
	done
	for i in ${DEB_DIR}/*.deb; do env DEB_RELEASE=${DEB_RELEASE} world/bin/deb2deb $$i; done
	ls -l ${DEB_DIR}/*.deb

deb-bin deb-bin-java deb-bin-x86:
	${MAKE} -C./world/etc/apt/${DEB_VENDOR}/${DEB_RELEASE}/deb -f ../../../Makefile DEB_RELEASE=${DEB_RELEASE} DEB_VENDOR=${DEB_VENDOR} $@

deb-clean:
	rm -rf ${DEB_DIR}
	${MAKE} -C./world/etc/apt/${DEB_VENDOR}/${DEB_RELEASE}/deb -f ../../../Makefile DEB_RELEASE=${DEB_RELEASE} DEB_VENDOR=${DEB_VENDOR} distclean

deb-distclean: deb-clean
	rm -rf ${DEB_TMP}
	mkdir -p ${DEB_TMP}


deb-repo-dir:
	mkdir -p ${DEB_REPO_DIR}/${DEB_VENDOR}/${DEB_RELEASE}/conf
	pwd=`pwd`; cd ${DEB_REPO_DIR}/${DEB_VENDOR}/${DEB_RELEASE}/conf; \
	if [ ! -e distributions ]; then \
	    ln -s $$pwd/world/etc/apt/${DEB_VENDOR}/${DEB_RELEASE}/conf/distributions; \
	fi

# should be part of world/etc/apt/Makefile
# fix & sign debian packages	
deb-repo: deb-repo-dir
	for i in ${DEB_DIR}/*.deb; do \
	  env DEB_RELEASE=${DEB_RELEASE} world/bin/deb2deb $$i; \
	done
	dpkg-sig -k B1826CDD --sign builder ${DEB_DIR}/*.deb
	set -e; pwd=`pwd`; cd ${DEB_REPO_DIR}/${DEB_VENDOR}/${DEB_RELEASE}; \
	for i in $$pwd/${DEB_DIR}/*.deb; do \
 	   package=$$(echo $$i | perl -npe 's,.*/,,; s,_[\d+\.\-]+\_(all|amd64|i386)\.deb$$,,'); \
	   echo "Install package $$package"; \
 	   reprepro --ignore=undefinedtarget -Vb . removematched ${DEB_RELEASE} $$package; \
 	   reprepro --ignore=undefinedtarget -Vb . includedeb ${DEB_RELEASE} $$i; \
	done

# XXX: update legacy repo
# cp /usr/local/www/debian.bbbike.org/src/legacy/ubuntu/trusty/*deb tmp/deb/ubuntu/trusty-legacy
# make DEB_RELEASE=trusty-legacy deb-repo-upload

deb-repo-upload:
	find ${DEB_TMP}/ ! -name '*.deb' -type f| xargs rm -f
	rsync -m -azv ${DEB_TMP} debian.bbbike.org:projects/bbbike/tmp	
	@echo "Now run:"
	ssh debian.bbbike.org 'cd ~/projects/bbbike && make DEB_VENDOR=${DEB_VENDOR} DEB_RELEASE=${DEB_RELEASE} deb-repo'

deb-bootstrap debian-bootstrap: deb-bootstrap-dir
bbbike-bootstrap: bbbike-partition debian-bootstrap update-files install-backend-lighttpd
	sudo ${BBMAKE} extract-bbbike-org-install
	sudo ${BBMAKE} EXTRACTS_SPOOL_DIR=/var/cache/extract-pro extract-bbbike-org-install
	${BBMAKE} download-bbbike-org-install
	sudo ${BBMAKE} cache-clean
	sudo ${MAKE} -C./world/etc crontab-root
	sudo ${MAKE} -C./world/etc/munin install-munin-bbbike
	sudo update-rc.d lighttpd defaults
	rm -f ./HEADER.txt
	-sudo /etc/init.d/lighttpd stop
	sleep 0.5
	sudo /etc/init.d/lighttpd start
	@echo ""
	@echo "You may also run: make staging"

MAPERITIVE_LOGDIR=/var/log/maperitive
deb-opt-dir-version:
	sudo mkdir -p ${MAPERITIVE_LOGDIR}
	sudo chown -R ${LOGNAME} ${MAPERITIVE_LOGDIR}
	cd ${DEB_OPT_DIR}; \
	  sudo rm -f osmosis splitter mkgmap OsmAndMapCreator mapsforge omim Maperitive; \
	  sudo ln -fs osmosis-0.46 osmosis; \
	  sudo ln -fs splitter-r584 splitter; \
	  sudo ln -fs mkgmap-r4000 mkgmap; \
	  sudo ln -fs OsmAndMapCreator-2017-12-28 OsmAndMapCreator; \
	  sudo ln -fs mapsforge-0.9.0 mapsforge; \
	  sudo ln -fs omim-1.0 omim; \
	  sudo ln -fs Maperitive-2.4.1 Maperitive
	${BBMAKE} maperitive-bootstrap
	${BBMAKE} osmosis-bootstrap

bbbike-partition:
	sudo mkdir -p ${BBBIKE_PARTITION}
	sudo chown ${LOGNAME} ${BBBIKE_PARTITION}
	cd ${BBBIKE_PARTITION}; mkdir -p cache extract projects tmp www
	sudo ${MAKE} bbbike-cache-install
	
install-backend-lighttpd:
	${MAKE} -C./world/etc install-backend-lighttpd
	sudo chmod o+rx /var/log/lighttpd

# sync config files
deb-bootstrap-rsync:
	rsync -az ${BBBIKE_WEB_SERVER}:.openstreetmap $$HOME
	rsync -az ${BBBIKE_WEB_SERVER}:.osmosis $$HOME
	rsync -az ${BBBIKE_WEB_SERVER}:.bbbike* $$HOME
	rsync -az ${BBBIKE_WEB_SERVER}:.bashrc $$HOME
	rsync -az ${BBBIKE_WEB_SERVER}:.proverc $$HOME
	rsync -az ${BBBIKE_WEB_SERVER}:.gitconfig $$HOME

# post debian package configuration
deb-bootstrap-dir: osmosis-bootstrap deb-opt-dir-version
	set -e; cd ${DEB_OPT_DIR}/bin; \
	   for i in *; do \
	     test -e /usr/local/bin/$$i || sudo ln -fs ${DEB_OPT_DIR}/bin/$$i /usr/local/bin/$$i; \
	   done	
	test -e /usr/local/bin/perl || sudo ln -fs /usr/bin/perl /usr/local/bin/perl
	test -e /usr/lib/libprotobuf-lite.so.6.0.0 || sudo ln -fs ${DEB_OPT_DIR}/lib/libprotobuf-lite.so.6.0.0 /usr/lib/libprotobuf-lite.so.6.0.0
	test -e /usr/lib/libprotobuf-lite.so.6     || sudo ln -fs ${DEB_OPT_DIR}/lib/libprotobuf-lite.so.6     /usr/lib/libprotobuf-lite.so.6
	lib=$$(dpkg -S 'libgeos-3*.so' | awk '{ print $$2 }'); dir=$$(dirname $$lib); \
	cd $$dir;  \
	if [ ! -e libgeos-3.2.2.so ]; then \
	    sudo ln -fs $$(basename $$lib) libgeos-3.2.2.so; \
	fi
	test -e /usr/local/bin/osmosis || sudo ln -sf ${DEB_OPT_DIR}/osmosis/bin/osmosis /usr/local/bin/osmosis
	sudo mkdir -p /bbbike/tmp /tmpfs
	sudo chmod 7777 /bbbike/tmp /tmpfs
	${MAKE} -f world/Makefile.osm bbbike-c

osmosis-bootstrap:
	mkdir -p ${OSMOSIS_PLUGIN_DIR}
	cd ${OSMOSIS_PLUGIN_DIR}; \
	  rm -f mapsforge-map-writer-*.jar; \
	  ln -fs ${DEB_OPT_DIR}/mapsforge/mapsforge-map-writer-*.jar .

maperitive-bootstrap:
	cd ${DEB_OPT_DIR}/Maperitive; \
          sudo chown -R ${LOGNAME} . ; \
	  perl -i.bak -npe 's,<file value="logs/,<file value="/var/log/maperitive/,g' Maperitive.exe.config

bbbike-c:
	${MAKE} -s -C./ext all install >/dev/null 2>&1


DOWNLOAD_PREFIX=/usr/local/www/download.bbbike.org
download-bbbike-org-install:
	mkdir -p ${DOWNLOAD_PREFIX}
	mkdir -p ${DOWNLOAD_PREFIX}/osm/planet
	mkdir -p ${DOWNLOAD_PREFIX}/bbbike
	cd ${DOWNLOAD_PREFIX}; \
	  ln -fs ../bbbike.org/world/download/favicon.ico; \
	  ln -fs ../bbbike.org/world/download/index.html; \
	  ln -fs ../bbbike.org/world/web/robots-download.txt robots.txt
	cd ${DOWNLOAD_PREFIX}/osm; \
	  if ! test -e bbbike; then ln -fs ../../bbbike.org/osm bbbike; fi; \
	  ln -fs ../../bbbike.org/world/download/osm/index.html; \
	  ln -fs ${EXTRACTS_SPOOL_DIR}/download extract
	cd ${DOWNLOAD_PREFIX}/osm/bbbike; \
	  ln -fs ../world/download/osm/bbbike/HEADER.txt .; \
	cd ${DOWNLOAD_PREFIX}/osm/planet; \
	  ln -fs $$HOME/projects/osm/download/planet-latest.osm.pbf . ;\
	  ln -fs $$HOME/projects/osm/download/planet-latest.osm.pbf.md5 . ;\
	  ln -fs $$HOME/projects/osm/download/planet-latest-nometa.osm.pbf . ;\
	  ln -fs $$HOME/projects/osm/download/planet-latest-nometa.osm.pbf.md5 . ;\
	  ln -fs ../../../bbbike.org/world/download/osm/planet/HEADER.txt .
	cd ${DOWNLOAD_PREFIX}/osm/planet; \
	  ln -fs $$HOME/projects/osm/download/sub-planet .
	#cd ${DOWNLOAD_PREFIX}/..; mkdir -p osm; cd osm; \
	#  ln -fs ../download.bbbike.org/osm/planet download
	${MAKE} download-srtm-bbbike-org-install

# http://download.freizeitkarte-osm.de/Development/ele_25_250_500/Hoehendaten_Freizeitkarte_Europe.osm.pbf
download-srtm-bbbike-org-install:
	cd ${DOWNLOAD_PREFIX}/osm/planet; mkdir -p srtm; cd srtm; \
	  ln -fs $$HOME/projects/osm/download/srtm/planet-srtm-e40.osm.pbf .; \
	  ln -fs $$HOME/projects/osm/download/srtm/CHECKSUM.txt .
	cd ${DOWNLOAD_PREFIX}/osm/planet; mkdir -p sub-srtm; cd sub-srtm; \
	  ln -fs $$HOME/projects/osm/download/sub-srtm/* .

UPDATE_APT=deb-perl deb-equivs deb-bin deb-repo-upload

# debian9/stretch
update-apt-stretch update-apt-debian9:
	${MAKE} DEB_VENDOR=debian DEB_RELEASE=stretch  ${UPDATE_APT}

# ubuntu14
update-apt-trusty update-apt-ubuntu14:
	${MAKE} DEB_VENDOR=ubuntu DEB_RELEASE=trusty  ${UPDATE_APT}

# ubuntu12
update-apt-precise update-apt-ubuntu update-apt-ubuntu12:
	${MAKE} DEB_VENDOR=ubuntu DEB_RELEASE=precise ${UPDATE_APT}

#
# build Osmand.net devel java libs
# start this command in the top-level directory of
# Osmand git checkout, e.g.:
#
# git clone https://github.com/osmandapp/Osmand.git
# cd Osmand
# make -f this.makefile osmand-devel
#
osmand-devel:
	cd DataExtractionOSM; \
	   ant clean compile build -logfile build.log
	dir=OsmAndMapCreator-development-`date +%Y-%m-%d`; \
	   rm -rf $$dir; mkdir $$dir; \
	   (cd $$dir; unzip -q ../DataExtractionOSM/build.zip ); \
	   zip -rq $$dir.zip $$dir; \
	   ls -l `pwd`/$$dir.zip

test-org:
	TMPDIR=${TMP_DIR} ./world/bin/lighttpd-template-update

lighttpd-restart webserver-restart: lighttpd-stop temp-clean test-org lighttpd-start

lighttpd-start webserver-start:
	mkdir -p ${TMP_DIR}
	$$(pwd)/world/bin/lighttpd-start &
	sleep 0.2

lighttpd-stop webserver-stop:
	-./world/bin/lighttpd-stop || killall -TERM lighttpd


test prove: lighttpd-restart perlcheck-bbbike-cgi
	mkdir -p ${TMP_DIR}
	TMPDIR=${TMP_DIR} LANG=C LC_ALL=C time prove ${prove_opt} -j${MAX_CPU} --shuffle --timer --state=save ${PROVE_FILES}
	@echo ">>> All tests are successfully done. Stop lighttpd <<<"
	@echo ""
	${MAKE} lighttpd-stop

jasmine-node test-js:
	jasmine-node world/t/spec

# run a git fetch on all remote git repos
git-fetch: git-fetch-world
	git fetch eserte
	git status -b -u no -s | egrep -w behind | wc -l > .git-fetch-status-eserte
	git fetch origin
	git fetch github

download-symlink-distclean:
	find /usr/local/www/download.bbbike.org -type l -print0 | perl -0e 'while(<>) { next if m,^\./tmp/,; if (! -e $$_) { unlink } }'

git-fetch-world:
	cd world; git fetch origin
	cd world; git fetch github

git-push: git-push-world
	git push

git-push-world:
	cd world; git push

git-pull: git-pull-world
	git pull

git-pull-world:
	cd world; \
	 git checkout html/bbbike-js.js; \
	 git pull

git-diff diff: git-diff-world
	git diff

git-diff-world:
	cd world; git diff

git-status: git-status-world
	git status

git-status-world:
	cd world; git status

git-branch:
	git branch
	cd world; git branch

git-commit: git-commit-world

git-commit-world:
	cd world; git commit .

mygit: git-fetch git-pull git-push

git-gc:
	du -hs .git; git gc; du -hs .git
	cd world; du -hs .git; git gc; du -hs .git

apt-clean:
	sudo apt-get clean
	sudo apt-get autoremove
	sudo apt-get install -f

host-clean: git-gc apt-clean


bbbike-tarball bbbike-src tarball:
	./world/bin/bbbike-tarball

install-xvfb:
	sudo cp world/etc/init.d/xvfb /etc/init.d
	sudo update-rc.d xvfb defaults

docker-build:
	${DOCKER} build -f world/etc/docker/${DOCKER_IMAGE_FILE} -t ${DOCKER_BBBIKE_TAG} .
docker-shell:
	${DOCKER} run -it --rm -p 8000:80 ${DOCKER_BBBIKE_TAG}
docker-check:
	${DOCKER} run -it --rm ${DOCKER_BBBIKE_TAG} /bin/bash -ic 'echo 3 | sudo tee $$HOME/.ncpu.ncpu; make git-pull; BBBIKE_TEST_NO_NETWORK=1 make check || cat log.check*'
docker-check-w:
	${DOCKER} run -it --rm ${DOCKER_BBBIKE_TAG} /bin/bash -ic 'echo 3 | sudo tee $$HOME/.ncpu.ncpu; make git-pull; BBBIKE_TEST_NO_NETWORK=1 make check-w || cat log.check*'

docker-build-all:
	${NICE} ${BBMAKE} -j${MAX_CPU} \
	  docker-build-extract-debian9 \
	  docker-build-extract-debian10 \
	  docker-build-extract-ubuntu14 \
	  docker-build-extract-ubuntu16 \
	  docker-build-extract-ubuntu18

docker-build-libosmium-all:
	${NICE} ${BBMAKE} -j${MAX_CPU} \
	  docker-build-libosmium-debian9 \
	  docker-build-libosmium-ubuntu16 \
	  docker-build-libosmium-debian10 \
	  docker-build-libosmium-ubuntu18


DOCKER_CHECK_ALL_COMMAND=docker-check
docker-check-all:
		${BBMAKE} DOCKER_BBBIKE_TAG=bbbike/extract-debian9  ${DOCKER_CHECK_ALL_COMMAND}
		${BBMAKE} DOCKER_BBBIKE_TAG=bbbike/extract-debian10 ${DOCKER_CHECK_ALL_COMMAND}
		${BBMAKE} DOCKER_BBBIKE_TAG=bbbike/extract-ubuntu14 ${DOCKER_CHECK_ALL_COMMAND}
		${BBMAKE} DOCKER_BBBIKE_TAG=bbbike/extract-ubuntu16 ${DOCKER_CHECK_ALL_COMMAND}
		${BBMAKE} DOCKER_BBBIKE_TAG=bbbike/extract-ubuntu18 ${DOCKER_CHECK_ALL_COMMAND}

docker-check-w-all:
		${BBMAKE} DOCKER_CHECK_ALL_COMMAND=docker-check-w docker-check-all


# debian
docker-build-extract-debian9:
	${BBMAKE} DOCKER_IMAGE_FILE=bbbike-debian9 DOCKER_BBBIKE_TAG=bbbike/extract-debian9 docker-build
docker-build-extract-debian10:
	${BBMAKE} DOCKER_IMAGE_FILE=bbbike-debian10 DOCKER_BBBIKE_TAG=bbbike/extract-debian10 docker-build

docker-build-libosmium-debian9:
	${BBMAKE} DOCKER_IMAGE_FILE=libosmium-debian9 DOCKER_BBBIKE_TAG=bbbike/libosmium-debian9 docker-build
docker-build-libosmium-debian10:
	${BBMAKE} DOCKER_IMAGE_FILE=libosmium-debian10 DOCKER_BBBIKE_TAG=bbbike/libosmium-debian10 docker-build

# ubuntu
docker-build-extract-ubuntu14:
	${BBMAKE} DOCKER_IMAGE_FILE=bbbike-ubuntu14 DOCKER_BBBIKE_TAG=bbbike/extract-ubuntu14 docker-build
docker-build-extract-ubuntu16:
	${BBMAKE} DOCKER_IMAGE_FILE=bbbike-ubuntu16 DOCKER_BBBIKE_TAG=bbbike/extract-ubuntu16 docker-build
docker-build-extract-ubuntu18:
	${BBMAKE} DOCKER_IMAGE_FILE=bbbike-ubuntu18 DOCKER_BBBIKE_TAG=bbbike/extract-ubuntu18 docker-build

docker-build-libosmium-ubuntu16:
	${BBMAKE} DOCKER_IMAGE_FILE=libosmium-ubuntu16 DOCKER_BBBIKE_TAG=bbbike/libosmium-ubuntu16 docker-build
docker-build-libosmium-ubuntu18:
	${BBMAKE} DOCKER_IMAGE_FILE=libosmium-ubuntu18 DOCKER_BBBIKE_TAG=bbbike/libosmium-ubuntu18 docker-build

docker-build-tilemaker-ubuntu16:
	${BBMAKE} DOCKER_IMAGE_FILE=tilemaker-ubuntu16 DOCKER_BBBIKE_TAG=bbbike/tilemaker-ubuntu16 docker-build

# see world/etc/docker/README
docker-build-tile:
	${BBMAKE} DOCKER_IMAGE_FILE=tile-ubuntu14 DOCKER_BBBIKE_TAG=bbbike/tile docker-build
docker-shell-tile:
	${BBMAKE} DOCKER_BBBIKE_TAG=bbbike/tile docker-shell
docker-shell-tilemaker:
	${BBMAKE} DOCKER_BBBIKE_TAG=bbbike/tilemaker-ubuntu16 docker-shell

# remove temp images
docker-clean:
	if ${DOCKER} images | egrep -q '^<none>'; then \
	  sudo /etc/init.d/docker restart; \
	  ${DOCKER} rmi -f $$(${DOCKER} images | egrep '^<none>' | awk '{ print $$3 }'); \
	  ${DOCKER} rmi -f $$(${DOCKER} images | egrep '^<none>' | awk '{ print $$3 }'); \
	  sudo /etc/init.d/docker restart; \
	fi
	${DOCKER} images

# remove all available images
docker-distclean:
	if ${DOCKER} images | egrep -q -v '^REPOSITORY'; then \
	  sudo /etc/init.d/docker restart; \
	  ${DOCKER} rmi -f $$(${DOCKER} images | egrep -v '^REPOSITORY' | awk '{ print $$3 }'); \
	  ${DOCKER} rmi -f $$(${DOCKER} images | egrep -v '^REPOSITORY' | awk '{ print $$3 }'); \
	  sudo /etc/init.d/docker restart; \
	fi
	${DOCKER} images

check-tileserver:
	curl -sf http://localhost:80/osm/bbbike/11/1100/671.png > /dev/null
	curl -sf http://localhost:80/osm/bbbike/11/1100/671.png | wc -c

help:
	@echo "bbbike version: ${GIT_ID}"
	@echo ""
	@echo "usage: make [ targets ... ]"
	@echo ""
	@echo "  [ "`${PERL} -e 'print join " ", sort @ARGV' ${CITIES}` "]"
	@echo ""
	@echo "  [ help | cities | cities-parallel | fetch-extracts | fetch-extracts-pbf ]"
	@echo "  [ rsync | rsync-tgz | rsync-osm | rsync-osm-dev ]"
	@echo "  [ symlink-download ]"
	@echo "  [ jsbeautifier | perltidy | tidy ]"
	@echo "  [ distclean-data | distclean | distclean-real ]"
	@echo ""
	@echo "  [ bbbike-osm2pbf | osm2pbf | pbf2osm | pbf2csv | pbf2opl ]"
	@echo "  [ pbf2geojson | pbf2geojsonseq | pbf2text | pbf2sqlite ]"
	@echo "  [ osm2garmin | osm2shape | osm2osmand | osm2navit | osm2mapsforge ]"
	@echo "  [ osm2png | osm2svg | osm2mapsme ]"
	@echo "  [ bbbike2wgs84-mapnik | bbbike-mapnik-config ]"
	@echo "  [ bbbike-mapnik-postgis | bbbike-tile-update ]"
	@echo "  [ bbbike-tarball | mapnik-restart ]"
	@echo "  [ install-xvfb ]"
	@echo ""
	@echo "  [ clean | dist-clean | clean-cache | clean-planet | clean-tile ]"
	@echo "  [ clean-tilesize-db | download-symlink-distclean ]"
	@echo ""
	@echo "  [ create-osp | bbbike2wgs84 | update-robots.txt | create-sitemap ]"
	@echo "  [ cache-install | cache-heater | cache-heater-streets ]"
	@echo "  [ purge-cache-js ]"
	@echo "  [ create-bbbike-web-symlinks | kml | create-osp | index ]"
	@echo "  [ convert-wgs84 | convert-bbbike | convert-bbbike-full ]"
	@echo "  [ city-count | city-reorder | city-file | check-osm | cleanup-osm-error ]"
	@echo "  [ check-routing | check-routing-fast | perlcheck ]"
	@echo "  [ city-memory | varnish-purge-all ]"
	@echo "  [ osm-html ]"
	@echo ""
	@echo "  [ elevation-fetch | elevation-update | elevation-check | elevation-repair ]"
	@echo ""
	@echo "  [ planet-download | planet-download-bzip2 | planet-download-pbf ]"
	@echo "  [ planet-geofabrik-download ]"
	@echo "  [ planet-nometa | sub-planet | sub-srtm | sub-planet-statistic ]"
	@echo "  [ planet-streets | planet-places ]"
	@echo "  [ update-database | update-files ]"
	@echo "  [ download-bbbike-org-install ]"
	@echo ""
	@echo "  [ staging | extract-bbbike-org-install | garmin-legend ]"
	@echo "  [ extract-gc | extract-trash-gc ]"
	@echo "  [ extract-distclean ]"
	@echo ""
	@echo "  [ tile | tile-extract | tile-convert | tile-database | tile-checksum ]"
	@echo "  [ tile-distclean | tile-rsync | tile-aws-s3"
	@echo "  [ tile-convert-srtm | tile-srtm-csv ]"
	@echo ""
	@echo "  [ test-org | lighttpd-restart | test ]"
	@echo "  [ jasmine-node | test-js ]"
	@echo ""
	@echo "  [ deb-perl | deb-equivs | deb-bin ]"
	@echo "  [ deb-clean | deb-repo | deb-repo-upload | perl-cpan-clean ]"
	@echo "  [ make deb-clean deb-perl deb-equivs deb-bin deb-repo-upload ]"
	@echo "  [ make deb-clean deb-perl deb-repo-upload ]"
	@echo "  [ make deb-clean deb-equivs deb-repo-upload ]"
	@echo "  [ make deb-clean deb-bin deb-repo-upload ]"
	@echo "  [ make deb-clean deb-bin-x86 deb-repo-upload ]"
	@echo "  [ make deb-clean deb-bin-java deb-repo-upload ]"
	@echo ""
	@echo "  [ sudo apt-get clean && sudo apt-get update && sudo apt-get dist-upgrade -y ]"
	@echo "  [ sudo apt-get install bbbike-world ]"
	@echo ""
	@echo "  [ debian-bootstrap | bbbike-bootstrap | bbbike-c ]"
	@echo "  [ build-runtime ]"
	@echo "  [ apt-clean | host-clean ]"
	@echo "  [ git-fetch | git-pull | git-push | mygit | git-gc ]"
	@echo ""
	@echo "  [ check | check-world | check-full | check-failed ]"
	@echo "  [ check-tileserver ]"
	@echo ""
	@echo "  [ docker-build | docker-shell ]"
	@echo "  [ docker-check | docker-check-w | docker-check-all ]"
	@echo "  [ DOCKER_BBBIKE_TAG=bbbike/extract-debian9  docker-check-w ]"
	@echo "  [ docker-build-tile | docker-shell-tile ]"
	@echo "  [ docker-build-extract-debian9 | docker-build-extract-debian10 ]"
	@echo "  [ docker-build-extract-ubuntu14 | docker-build-extract-ubuntu16 | docker-build-extract-ubuntu18 ]"
	@echo "  [ docker-build-libosmium-debian9 | docker-build-libosmium-debian10 ]"
	@echo "  [ docker-build-libosmium-ubuntu16 | docker-build-libosmium-ubuntu18 ]"
	@echo "  [ docker-build-tilemaker-ubuntu16 ]"
	@echo "  [ docker-build-all | docker-build-libosmium-all | docker-clean | docker-distclean ]"
	@echo ""
	@echo "after failed install/cache update:"
	@echo "bbbike_download= bbbike_extract= bbbike_convert= bbbike_install= make update-database"

	@echo ""
	@echo "see also ./world/README"

