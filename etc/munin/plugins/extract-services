#!/usr/local/bin/perl
# Copyright (c) Sep 2011-2024 Wolfram Schneider, https://bbbike.org
#
# extract-services - munin statistics for BBBike extract service

use Getopt::Long;
use Data::Dumper;
use File::stat;
use IO::File;
use File::Basename;
use CGI;

use strict;
use warnings;

$ENV{PATH} = '/bin:/usr/bin';
$ENV{LANG} = 'C';

# 0: quiet, 1: normal, 2: verbose
my $debug = defined $ENV{MUNIN_BBBIKE_DEBUG} ? $ENV{MUNIN_BBBIKE_DEBUG} : 0;

my $database = '/var/tmp/munin-bbbike-extract';
my $logfile  = '/var/log/lighttpd/extract.bbbike.log';

# munin-bbbike config file
my $munin_config_file = "/etc/munin/extract.conf";

# {fieldname}.min?
# should be 0 or 1
my $min_value = 0;

# ignore old offset files (> 60 minutes)
my $ignore_old_offset = 1;

my $type = 'extract';

# reset offset
my $reset = 0;

my $days_failed     = 90;
my $failed_warning  = 16;
my $failed_critical = 48;

# keep in sync with world/lib/Extract/Config.pm
#
# to update manually, run:
# perl -I world/lib/ -e 'use Extract::Config; print join "\n", sort keys %$Extract::Config::formats'
#
my $config = {
    'tilesize' => [
        qw/
          bbbike-perltk.zip
          csv.gz
          csv.xz
          garmin-ajt03-ascii.zip
          garmin-ajt03-latin1.zip
          garmin-ajt03.zip
          garmin-bbbike-ascii.zip
          garmin-bbbike-latin1.zip
          garmin-bbbike.zip
          garmin-cycle-ascii.zip
          garmin-cycle-latin1.zip
          garmin-cycle.zip
          garmin-leisure-ascii.zip
          garmin-leisure-latin1.zip
          garmin-leisure.zip
          garmin-onroad-ascii.zip
          garmin-onroad-latin1.zip
          garmin-onroad.zip
          garmin-ontrail-ascii.zip
          garmin-ontrail-latin1.zip
          garmin-ontrail.zip
          garmin-openfietsfull-ascii.zip
          garmin-openfietsfull-latin1.zip
          garmin-openfietsfull.zip
          garmin-openfietslite-ascii.zip
          garmin-openfietslite-latin1.zip
          garmin-openfietslite.zip
          garmin-opentopo-ascii.zip
          garmin-opentopo-latin1.zip
          garmin-opentopo.zip
          garmin-oseam-ascii.zip
          garmin-oseam-latin1.zip
          garmin-oseam.zip
          garmin-osm-ascii.zip
          garmin-osm-latin1.zip
          garmin-osm.zip
          geojson.xz
          geojsonseq.xz
          mapsforge-osm.zip
          mbtiles-basic.zip
          mbtiles-openmaptiles.zip
          o5m.gz
          o5m.xz
          obf.zip
          opl.xz
          organicmaps-osm.zip
          osm.bz2
          osm.gz
          osm.pbf
          osm.xz
          png-cadastre.zip
          png-google.zip
          png-hiking.zip
          png-osm.zip
          png-urbanight.zip
          png-wireframe.zip
          shp.zip
          sqlite.xz
          srtm.garmin-srtm.zip
          srtm.obf.zip
          srtm.osm.pbf
          srtm.osm.xz
          svg-cadastre.zip
          svg-google.zip
          svg-hiking.zip
          svg-osm.zip
          svg-urbanight.zip
          svg-wireframe.zip
          text.xz
          /
    ]
};

sub usage {
    my $types = join " | ", &get_types;

    <<EOF;
usage: $0 [ options ] config

--debug=0..2    		default: $debug
--logfile=/path/to/logfile	default: $logfile
--database=/path/to/logfile	default: $database
--reset=[0,1]                   reset offset to zero
--type=<stat type>		[ $types ], default: $type

Munin bbbike config file: $munin_config_file
EOF
}

sub get_types {
    my @types = qw/tilesize extract format failed/;
    return sort @types;
}

# escape label names for older munin releases
sub escape_label {
    my $label = shift;

    $label =~ s/-/_/g;
    $label =~ s/\./_/g;

    return $label;
}

sub config_extract () {
    <<EOF;
graph_title Extract Requests
graph_vlabel Extracts
graph_category extract
graph_info Number of extracts
graph_period minute
graph_scale no
data.label All Extracts
data.min $min_value
bbox.label Bounding Box
bbox.min $min_value
polygon.label Polygon
polygon.min $min_value
EOF
}

sub config_tilesize () {
    my $data = <<EOF;
graph_title Extract Tile Size
graph_vlabel Format
graph_category extract
graph_info Number of Tile Size Requests by Format
graph_period minute
graph_scale no
EOF

    foreach my $label ( sort @{ $config->{'tilesize'} } ) {
        my $label_e = escape_label($label);
        $data .= "$label_e.label $label\n";
        $data .= "$label_e.min $min_value\n";
    }

    return $data;
}

sub config_format () {
    my $data = <<EOF;
graph_title Extract formats
graph_vlabel Format
graph_category extract
graph_info Number Requests by Format
graph_period minute
graph_scale no
EOF

    foreach my $label ( sort @{ $config->{'tilesize'} } ) {
        my $label_e = escape_label($label);
        $data .= "$label_e.label $label\n";
        $data .= "$label_e.min $min_value\n";
    }

    return $data;
}

sub config_failed () {
    my $data = <<EOF;
graph_title Extract failed
graph_vlabel Format
graph_category extract
graph_info Number Requests by failed Format in $days_failed days
graph_period minute
graph_scale no
EOF

    foreach my $label ( sort @{ $config->{'tilesize'} } ) {
        my $label_e = escape_label($label);
        $data .= "$label_e.label $label\n";
        $data .= "$label_e.min $min_value\n";
        $data .= "$label_e.warning $failed_warning\n";
        $data .= "$label_e.critical $failed_critical\n";
    }

    return $data;
}

sub config {
    my $type = shift;

    return
        $type eq 'tilesize' ? &config_tilesize
      : $type eq 'format'   ? &config_format
      : $type eq 'failed'   ? &config_failed
      : $type eq 'extract'  ? &config_extract
      :                       die "Unknown stat type: $type\n";
}

sub display_results {
    my $config = shift;
    my $count  = shift;

    my $data = "";

    foreach my $label ( sort @$config ) {
        my $label_e = escape_label($label);
        $data .= "$label_e.value "
          . ( exists $count->{$label} ? $count->{$label} : 0 ) . "\n";
    }

    return $data;
}

sub parse_log {
    my %args = @_;

    my $logfile  = $args{'logfile'};
    my $type     = $args{'type'};
    my $database = $args{'database'};
    $database .= "-$<-$type.txt";

    my $st     = stat($logfile) or die "stat $logfile: $!";
    my $offset = $st->size;

    # check for stale databases which are too old
    my $regnerate_database = 1;
    if ( -e $database ) {
        my $database_st = stat($database) or die "stat $database: $!";

        # ok, fresh data
        if ( $database_st->mtime >= time() - 60 * 60 ) {
            $regnerate_database = 0;
        }
        $regnerate_database = 0 if $ignore_old_offset == 0;
    }

    # first run, save file offset of logfile, do nothing
    if ($regnerate_database) {
        write_offset( $database, $offset );

        # run again to produce first results
        if ( !$args{'first_run'} ) {
            return parse_log( @_, 'first_run' => 1 );
        }
        return;
    }

    my $last_offset = get_offset($database);

    my $data = "";
    if ( $type eq 'extract' ) {
        my $count = count_extract(
            'logfile' => $logfile,
            'offset'  => $last_offset,
            'type'    => $type
        );

        #$data = "data.value " . $extract_count . "\n";
        $data = display_results( [ "data", "bbox", "polygon" ], $count );
    }

    elsif ( $type eq 'tilesize' ) {
        my $count = count_tilesize(
            'logfile' => $logfile,
            'offset'  => $last_offset,
            'type'    => $type,
            'scripts' => $config->{'tilesize'}
        );
        $data = display_results( $config->{'tilesize'}, $count );
    }

    elsif ( $type eq 'format' ) {
        my $count = count_format(
            'logfile' => $logfile,
            'offset'  => $last_offset,
            'type'    => $type,
            'scripts' => $config->{'format'}
        );
        $data = display_results( $config->{'tilesize'}, $count );
    }

    elsif ( $type eq 'failed' ) {
        my $count = &count_failed( 'days' => $days_failed );
        $data = display_results( $config->{'tilesize'}, $count );
    }

    else {
        die "Unknown type: $type\n";
    }

    # store current log file size in database for next run
    $st = stat($logfile) or die "stat $logfile: $!";
    write_offset( $database, $st->size );

    return $data;
}

#
# parse the bbbike access log file and count tile-size.cgi request
# and format
#
sub count_tilesize {
    my %args   = @_;
    my $file   = $args{'logfile'};
    my $offset = $args{'offset'};

    my $counter = {};
    warn "open $file\n" if $debug;
    my $fh = IO::File->new( $file, "r" ) or die "open $file: $!\n";

    if ( defined $offset ) {
        warn "Starting at offset: $offset\n" if $debug;
        seek( $fh, $offset, 0 );
    }

    while (<$fh>) {

        # proxy request with hostname
        #s,"GET http://.*?/,"GET /, if $frontend_proxy;
        #next if $ignore_localrequests && localrequest($_);

        if (m,"GET /cgi/tile-size\.cgi\?.*format=([^&" ]+),) {
            $counter->{$1}++;
        }
    }

    return $counter;
}

#
# parse the bbbike access log file and count request by format
#
sub count_format {
    my %args   = @_;
    my $file   = $args{'logfile'};
    my $offset = $args{'offset'};

    my $counter = {};
    warn "open $file\n" if $debug;
    my $fh = IO::File->new( $file, "r" ) or die "open $file: $!\n";

    if ( defined $offset ) {
        warn "Starting at offset: $offset\n" if $debug;
        seek( $fh, $offset, 0 );
    }

    while (<$fh>) {
        if (m,"GET /(cgi/extract\.cgi)?\?.*format=([^&" ]+),) {
            $counter->{$2}++;
        }
    }

    return $counter;
}

#
# parse the failed2 directory for errors
#
sub count_failed {
    my %args = @_;
    my $days = $args{'days'} // 30;

    my $counter = {};

    my $shell =
        qq#find /opt/bbbike/extract/failed2/ -mtime -$days -name '*json'#
      . q# | xargs  egrep  -h '"format" :' | sed -e  's/[",]//g;' | sort | uniq -c | sort -nr | awk '{ print $4, $1 }'#;
    open( IN, "$shell |" ) or die "open $shell\n";

    while (<IN>) {
        chomp;
        my ( $key, $value ) = split;
        $counter->{$key} = $value;
    }

    return $counter;
}

sub get_offset {
    my $file = shift;

    if ($reset) {
        warn "Reset offset to zero in $file\n" if $debug;
        return 0;
    }

    my $fh     = IO::File->new( $file, "r" ) or die "open $file: $!\n";
    my $number = <$fh>;

    if ( defined $number ) {
        chomp($number);
    }
    else {
        $number = 0;
    }

    warn "Got offset $number from $file\n" if $debug;
    return $number;
}

sub write_offset {
    my $file   = shift;
    my $offset = shift;

    warn "Store offset $offset in $file\n" if $debug;
    my $fh = IO::File->new( $file, "w" ) or die "open $file: $!\n";
    print $fh $offset;
    $fh->close;
}

sub localrequest {
    my $host = shift;

    $host =~ /^10\.|^127\.0\.0\.1/ ? 1 : 0;
}

#
# parse the bbbike access log file and count route
# searches (parameters startc, zielc, pref_seen)
#
sub count_extract {
    my %args   = @_;
    my $file   = $args{'logfile'};
    my $offset = $args{'offset'};

    warn "open $file\n" if $debug;
    my $fh = IO::File->new( $file, "r" ) or die "open $file: $!\n";

    if ( defined $offset ) {
        warn "Starting at offset: $offset\n" if $debug;
        seek( $fh, $offset, 0 );
    }

    my $counter = { "data" => 0, "bbox" => 0, "polygon" => 0 };
    while (<$fh>) {
        if (m,"GET /\?\S*&email=\S+&,) {
            $counter->{"data"}++;
            if (/coords=(\-?[0-9]+\.[0-9]+%2C)/) {
                $counter->{"polygon"}++;
            }
            else {
                $counter->{"bbox"}++;
            }
        }
    }

    return $counter;
}

#
# detect type by program path
# ./extract-services-tilesize => ./extract-services --type=tilesize
#
sub detect_type {
    my $program = basename($0);

    if ( $program =~ /-(\w+)$/ ) {
        my $t = $1;
        return $t if grep { $t eq $_ } &get_types;
    }
}

sub parse_config {
    my $file = shift;

    warn "Open config file $file\n" if $debug;

    return if !-f $file;
    my $fh = IO::File->new( $file, "r" ) or die "open $file: $!\n";

    my @param;
    while (<$fh>) {
        chomp;
        s/^\s*#.*//;
        if ($_) {
            push @param, split /\s+/, $_;
        }
    }

    warn "Read config: ", join( " ", @param ), "\n" if $debug;
    return @param;
}

######################################################################
# main
#

my $help;

# read parameters from script path name
if (&detect_type) {
    $type = &detect_type;
    warn "re-set type=$type due script path name\n" if $debug >= 2;
}

# read parameters from munin-bbbike config file
my @config = parse_config($munin_config_file);
push( @ARGV, @config ) if @config;

GetOptions(
    "debug=i"    => \$debug,
    "reset=i"    => \$reset,
    "database=s" => \$database,
    "logfile=s"  => \$logfile,
    "type=s"     => \$type,
    "help"       => \$help,
) or die usage;

die usage                               if $help;
die "Unknown type '$type'\n\n" . &usage if !grep { $type eq $_ } &get_types;

if ( defined $ARGV[0] && $ARGV[0] eq 'config' ) {
    print &config($type);
}
else {
    my $text = &parse_log(
        'logfile'  => $logfile,
        'database' => $database,
        'type'     => $type
    );
    print $text if $text;
}
